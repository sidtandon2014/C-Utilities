// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MessageBuffer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BlockPlus
{

    /// <summary>Holder for reflection information generated from MessageBuffer.proto</summary>
    public static partial class MessageBufferReflection
    {

        #region Descriptor
        /// <summary>File descriptor for MessageBuffer.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static MessageBufferReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChNNZXNzYWdlQnVmZmVyLnByb3RvEglCbG9ja1BsdXMihgYKD0NsaWVudElu",
                  "dGVyZmFjZRISCgpzb3VyY2VfdG9uGAEgASgFEhIKCnNvdXJjZV9ucGkYAiAB",
                  "KAUSFgoOc291cmNlX2FkZHJlc3MYAyABKAkSFwoPZGVzdGluYXRpb25fdG9u",
                  "GAQgASgFEhcKD2Rlc3RpbmF0aW9uX25waRgFIAEoBRIbChNkZXN0aW5hdGlv",
                  "bl9hZGRyZXNzGAYgASgEEgsKA3VkaBgHIAEoBRITCgtwcm90b2NvbF9pZBgI",
                  "IAEoBRIVCg1zY2hlZHVsZV90aW1lGAkgASgEEhUKDXZhbGlkaXR5X3RpbWUY",
                  "CiABKAQSFwoPaXNfZHJfcmVxdWVzdGVkGAsgASgIEgsKA2RjcxgMIAEoBRIP",
                  "CgdtZXNzYWdlGA0gASgMEhYKDm1lc3NhZ2VfbGVuZ3RoGA4gASgFEhoKEmJ1",
                  "c2luZXNzX2V2ZW50X3VybBgPIAEoCRILCgNtY2MYECABKAUSCwoDbW5jGBEg",
                  "ASgFEhQKDHBob25lX3ByZWZpeBgSIAEoCRIUCgxtZXNzYWdlX2hhc2gYEyAB",
                  "KAkSEQoJZW50aXR5X2lkGBQgASgEEhMKC3RlbXBsYXRlX2lkGBUgASgEEhsK",
                  "E2lzX3ZhcmlhYmxlX2NvbnRlbnQYFiABKAgSEQoJZGVsaW1pdGVyGBcgASgJ",
                  "EgsKA3RhZxgYIAEoCRISCgpyZXF1ZXN0X2lkGBkgASgJEjUKCG1zZ190eXBl",
                  "GBogASgOMiMuQmxvY2tQbHVzLkNsaWVudEludGVyZmFjZS5NU0dfVFlQRRIi",
                  "ChpidWxrX2Rlc3RpbmF0aW9uX2FkZHJlc3NlcxgbIAEoCRIVCg1zdWJtaXR0",
                  "ZWRfdWlkGBwgASgJEh0KFWlzX2Rlc3RpbmF0aW9uX21hc2tlZBgdIAEoCCJZ",
                  "CghNU0dfVFlQRRILCgdVTktOT1dOEAASCQoFUFJPTU8QARIJCgVUUkFOUxAC",
                  "EhQKEFNFUlZJQ0VfSU1QTElDSVQQAxIUChBTRVJWSUNFX0VYUExJQ0lUEAQi",
                  "+wcKD1NlcnZlckludGVyZmFjZRIxCgZoZWFkZXIYASABKA4yIS5CbG9ja1Bs",
                  "dXMuU2VydmVySW50ZXJmYWNlLkhFQURFUhIVCg1hY2NlcHRlZF9UaW1lGAIg",
                  "ASgEEhIKCm1lc3NhZ2VfaWQYAyABKAQSFwoPdGVsZW1hcmtldGVyX2lkGAQg",
                  "ASgFEhIKCmFjY291bnRfaWQYBSABKAUSPQoMYWNjb3VudF90eXBlGAYgASgO",
                  "MicuQmxvY2tQbHVzLlNlcnZlckludGVyZmFjZS5BQ0NPVU5UX1RZUEUSNwoO",
                  "aW50ZXJmYWNlX3R5cGUYByABKA4yHy5CbG9ja1BsdXMuU2VydmVySW50ZXJm",
                  "YWNlLlRZUEUSEQoJc2VydmVyX2lkGAggASgFEkUKEGFjY291bnRfbXNnX3R5",
                  "cGUYCSABKA4yKy5CbG9ja1BsdXMuU2VydmVySW50ZXJmYWNlLkFDQ09VTlRf",
                  "TVNHX1RZUEUSFgoOYXBwbGljYXRpb25faWQYCiABKAUSGQoRZHJfdG9fY2xp",
                  "ZW50X3RpbWUYCyABKAQSFgoOZHJfcmV0cnlfY291bnQYDCABKAUSEwoLZHJf",
                  "YWNrX3RpbWUYDSABKAUSGAoQZHJfcmVzcG9uc2VfdGltZRgOIAEoBBIWCg5p",
                  "c19idWZmZXJlZF9kchgPIAEoCBIVCg1lbnRlcnByaXNlX2lkGBAgASgFEhMK",
                  "C3F1ZXVlZF90aW1lGBEgASgEEiIKGmVsYXBzZWRfdGltZWluc2VjX3BsYXRm",
                  "b3JtGBIgASgNEhcKD3NtcHBfYWNjb3VudF9pZBgTIAEoBRIXCg9lbnRlcnBy",
                  "aXNlZGNfaWQYFCABKAUSEgoKdGVsY29kY19pZBgVIAEoBSJ1CgZIRUFERVIS",
                  "EgoOSEVBREVSX1VOS05PV04QABINCglTVUJNSVRfU00QARIPCgtERUxJVkVS",
                  "WV9TTRACEhAKDERFTElWRVJZX1JQVBADEg0KCVJFVFJZX01TRxAEEgsKB1ND",
                  "QUxFUlQQBRIJCgVFUlJPUhAGIkMKDEFDQ09VTlRfVFlQRRIYChRBQ0NPVU5U",
                  "X1RZUEVfVU5LTk9XThAAEgwKCFBPU1RQQUlEEAESCwoHUFJFUEFJRBACImAK",
                  "BFRZUEUSEAoMVFlQRV9VTktOT1dOEAASCAoEU01QUBABEggKBEhUVFAQAhIT",
                  "Cg9QT1JUQUxfQ0FNUEFJR04QAxIUChBQT1JUQUxfU0NSVUJCSU5HEAQSBwoD",
                  "RlRQEAUiRQoQQUNDT1VOVF9NU0dfVFlQRRIJCgVQUk9NTxAAEgkKBVRSQU5T",
                  "EAESBwoDT1RQEAISCAoEU0VSVhADEggKBEdPVlQQBCLGAwoJUm91dGVJbmZv",
                  "EhgKEGRlc3Rfb3BlcmF0b3JfaWQYASABKAUSEAoIcm91dGVfaWQYAiABKAUS",
                  "FwoPYWN0dWFsX3JvdXRlX2lkGAMgASgFEhUKDWFnZ3JlZ2F0b3JfaWQYBCAB",
                  "KAUSGwoTZW50ZXJwcmlzZV9yb3V0ZV9pZBgFIAEoBRIWCg5kZV9xdWV1ZWRf",
                  "dGltZRgGIAEoBBIdChVyb3V0ZXJfcHJvY2Vzc2VkX3RpbWUYByABKAQSCwoD",
                  "bHJuGAggASgFEhAKCGxtcmVmX2lkGAkgASgEEhQKDHJlZmVyZW5jZV9ubxgK",
                  "IAEoBRIXCg9udW1iZXJfb2ZfcGFydHMYCyABKAUSEwoLcGFydF9udW1iZXIY",
                  "DCABKAUSFwoPaXNfZXhwaXJlZF9wYXJ0GA0gASgIEhwKFHByZWZlcmVuY2Vf",
                  "cmVmZXJlbmNlGA4gASgEEhkKEWNvbnNlbnRfcmVmZXJlbmNlGA8gASgEEhMK",
                  "C3NjcnViX3Rva2VuGBAgASgJEhAKCHRlbGNvX2lkGBEgASgFEhYKDnRlbGNv",
                  "X3JvdXRlX2lkGBIgASgFEhUKDWRlc3RfdGVsY29faWQYEyABKAUinwEKCVJl",
                  "dHJ5SW5mbxIYChBpc19yZXRyeV9lbmFibGVkGAEgASgIEhIKCnJldHJ5X3Rp",
                  "bWUYAiABKAQSFwoPbmV4dF9yZXRyeV90aW1lGAMgASgEEhMKC3JldHJ5X2Nv",
                  "dW50GAQgASgFEhcKD21heF9yZXRyeV9jb3VudBgFIAEoBRIdChVhbHRlcm5h",
                  "dGVfcmV0cnlfY291bnQYBiABKAUi/wMKBkRSSW5mbxIoCgZzdGF0dXMYASAB",
                  "KA4yGC5CbG9ja1BsdXMuRFJJbmZvLlNUQVRVUxISCgplcnJvcl9jb2RlGAIg",
                  "ASgFEhYKDnN1Yl9lcnJvcl9jb2RlGAMgASgFEhMKC3N0YXR1c190aW1lGAQg",
                  "ASgEEhgKEGRyX3JlY2VpdmVkX3RpbWUYBSABKAQSEgoKc3RyX3N0YXR1cxgG",
                  "IAEoCRIXCg9lcnJvcl9jb2RlX2hhc2gYByABKAkSFAoMZHJfZW5jcnlwdGVk",
                  "GAggASgJEg8KB2RyX2hhc2gYCSABKAkSHwoXc291cmNlX2FkZHJlc3NfcmVw",
                  "b3J0ZWQYCiABKAkSEwoLc3VibWl0X3RpbWUYCyABKAQSHwoXZWxhcHNlZF90",
                  "aW1laW5zZWNfdGVsY28YDCABKA0SFwoPSU1TSV9PcGVyYXRvcklEGA0gASgN",
                  "EhUKDUlNU0lfQ2lyY2xlSUQYDiABKA0SFgoOVkxSX09wZXJhdG9ySUQYDyAB",
                  "KA0SFAoMVkxSX0NpcmNsZUlEGBAgASgNEhMKC3F1ZXVlZF90aW1lGBEgASgE",
                  "IlIKBlNUQVRVUxISCg5TVEFUVVNfVU5LTk9XThAAEg0KCURFTElWRVJFRBAB",
                  "EgoKBkZBSUxFRBACEgsKB0VYUElSRUQQAxIMCghSRUpFQ1RFRBAEIo4FCgVU",
                  "ZWxjbxITCgtwaWNrdXBfdGltZRgBIAEoBBITCgtzdWJtaXRfdGltZRgCIAEo",
                  "BBISCgppc190YWdfc2V0GAMgASgIEiMKBHNtc2MYBCABKAsyFS5CbG9ja1Bs",
                  "dXMuVGVsY28uU01TQxIjCgRzbXBwGAUgASgLMhUuQmxvY2tQbHVzLlRlbGNv",
                  "LlNNUFAa4gEKBFNNU0MSDgoGc3RwX2lkGAEgASgFEg8KB3Ntc2NfaWQYAiAB",
                  "KAUSFwoPc3JpX3JldHJ5X2NvdW50GAMgASgFEhcKD2ZzbV9yZXRyeV9jb3Vu",
                  "dBgEIAEoBRIYChBodWJfdG9fc21zY190aW1lGAUgASgEEg8KB3Ntc2NfZ3QY",
                  "BiABKAQSEwoLdmxyX2FkZHJlc3MYByABKAQSDAoEaW1zaRgIIAEoBBISCgpy",
                  "ZHNfc3RhdHVzGAkgASgIEhQKDGFsZXJ0X3N0YXR1cxgKIAEoCBIPCgdzbXNj",
                  "X3R0GAsgASgFGpcCCgRTTVBQEjAKCHJlc3BvbnNlGAEgASgOMh4uQmxvY2tQ",
                  "bHVzLlRlbGNvLlNNUFAuUkVTUE9OU0USEwoLcmV0cnlfY291bnQYAiABKAUS",
                  "FwoPb3BlcmF0b3JfbXNnX2lkGAMgASgJEj4KD3Jlc3BvbnNlX3N0YXR1cxgE",
                  "IAEoDjIlLkJsb2NrUGx1cy5UZWxjby5TTVBQLlJFU1BPTlNFX1NUQVRVUyIl",
                  "CghSRVNQT05TRRILCgdVTktOT1dOEAASDAoIU1VCTUlUU00QASJICg9SRVNQ",
                  "T05TRV9TVEFUVVMSDwoLT1JTX1VOS05PV04QABIRCg1ERUxJVkVSWVNNX01P",
                  "EAESEQoNREVMSVZFUllTTV9NVBACIsICCgZEQkluZm8SJgoFdGFibGUYASAB",
                  "KA4yFy5CbG9ja1BsdXMuREJJbmZvLlRBQkxFIo8CCgVUQUJMRRILCgdVTktO",
                  "T1dOEAASDQoJU1VCTUlUX1NNEAESEwoPREVMSVZFUllfUkVQT1JUEAISEAoM",
                  "RFJfVE9fQ0xJRU5UEAMSFAoQU1VCTUlUX1NNX1JFSkVDVBAEEhAKDFJFVFJZ",
                  "X0lOU0VSVBAFEg8KC1JFVFJZX0FMRVJUEAYSFgoSU0NIRURVTEVEX0RFTElW",
                  "RVJZEAcSGwoXU01QUF9PUEVSQVRPUl9TVUJNSVRfU00QCBIcChhTTVBQX09Q",
                  "RVJBVE9SX0RFTElWRVJfU00QCRIdChlTTVBQX09QRVJBVE9SX0VYUElSRURf",
                  "RExSEAoSGAoUQlJPQURDQVNUX01BTkFHRVJfRFIQCyJoChFQbGF0Zm9ybUVy",
                  "cm9ySW5mbxIUCgxlcnJvcl9zb3VyY2UYASABKAkSEgoKZXJyb3JfY29kZRgC",
                  "IAEoBRIVCg1lcnJvcl9tZXNzYWdlGAMgASgJEhIKCmVycm9yX3RpbWUYBCAB",
                  "KAQi7wIKCVNNU0J1ZmZlchI0ChBjbGllbnRfaW50ZXJmYWNlGAEgASgLMhou",
                  "QmxvY2tQbHVzLkNsaWVudEludGVyZmFjZRI0ChBzZXJ2ZXJfaW50ZXJmYWNl",
                  "GAIgASgLMhouQmxvY2tQbHVzLlNlcnZlckludGVyZmFjZRIoCgpyb3V0ZV9p",
                  "bmZvGAMgASgLMhQuQmxvY2tQbHVzLlJvdXRlSW5mbxIfCgV0ZWxjbxgEIAEo",
                  "CzIQLkJsb2NrUGx1cy5UZWxjbxIiCgdkcl9pbmZvGAUgASgLMhEuQmxvY2tQ",
                  "bHVzLkRSSW5mbxIoCgpyZXRyeV9pbmZvGAYgASgLMhQuQmxvY2tQbHVzLlJl",
                  "dHJ5SW5mbxIiCgdkYl9pbmZvGAcgASgLMhEuQmxvY2tQbHVzLkRCSW5mbxI5",
                  "ChNwbGF0Zm9ybV9lcnJvcl9pbmZvGAggASgLMhwuQmxvY2tQbHVzLlBsYXRm",
                  "b3JtRXJyb3JJbmZvIjAKA1NNUxIpCgtzbXNfYnVmZmVycxgBIAMoCzIULkJs",
                  "b2NrUGx1cy5TTVNCdWZmZXJiBnByb3RvMw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.ClientInterface), global::BlockPlus.ClientInterface.Parser, new[]{ "SourceTon", "SourceNpi", "SourceAddress", "DestinationTon", "DestinationNpi", "DestinationAddress", "Udh", "ProtocolId", "ScheduleTime", "ValidityTime", "IsDrRequested", "Dcs", "Message", "MessageLength", "BusinessEventUrl", "Mcc", "Mnc", "PhonePrefix", "MessageHash", "EntityId", "TemplateId", "IsVariableContent", "Delimiter", "Tag", "RequestId", "MsgType", "BulkDestinationAddresses", "SubmittedUid", "IsDestinationMasked" }, null, new[]{ typeof(global::BlockPlus.ClientInterface.Types.MSG_TYPE) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.ServerInterface), global::BlockPlus.ServerInterface.Parser, new[]{ "Header", "AcceptedTime", "MessageId", "TelemarketerId", "AccountId", "AccountType", "InterfaceType", "ServerId", "AccountMsgType", "ApplicationId", "DrToClientTime", "DrRetryCount", "DrAckTime", "DrResponseTime", "IsBufferedDr", "EnterpriseId", "QueuedTime", "ElapsedTimeinsecPlatform", "SmppAccountId", "EnterprisedcId", "TelcodcId" }, null, new[]{ typeof(global::BlockPlus.ServerInterface.Types.HEADER), typeof(global::BlockPlus.ServerInterface.Types.ACCOUNT_TYPE), typeof(global::BlockPlus.ServerInterface.Types.TYPE), typeof(global::BlockPlus.ServerInterface.Types.ACCOUNT_MSG_TYPE) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.RouteInfo), global::BlockPlus.RouteInfo.Parser, new[]{ "DestOperatorId", "RouteId", "ActualRouteId", "AggregatorId", "EnterpriseRouteId", "DeQueuedTime", "RouterProcessedTime", "Lrn", "LmrefId", "ReferenceNo", "NumberOfParts", "PartNumber", "IsExpiredPart", "PreferenceReference", "ConsentReference", "ScrubToken", "TelcoId", "TelcoRouteId", "DestTelcoId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.RetryInfo), global::BlockPlus.RetryInfo.Parser, new[]{ "IsRetryEnabled", "RetryTime", "NextRetryTime", "RetryCount", "MaxRetryCount", "AlternateRetryCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.DRInfo), global::BlockPlus.DRInfo.Parser, new[]{ "Status", "ErrorCode", "SubErrorCode", "StatusTime", "DrReceivedTime", "StrStatus", "ErrorCodeHash", "DrEncrypted", "DrHash", "SourceAddressReported", "SubmitTime", "ElapsedTimeinsecTelco", "IMSIOperatorID", "IMSICircleID", "VLROperatorID", "VLRCircleID", "QueuedTime" }, null, new[]{ typeof(global::BlockPlus.DRInfo.Types.STATUS) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.Telco), global::BlockPlus.Telco.Parser, new[]{ "PickupTime", "SubmitTime", "IsTagSet", "Smsc", "Smpp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.Telco.Types.SMSC), global::BlockPlus.Telco.Types.SMSC.Parser, new[]{ "StpId", "SmscId", "SriRetryCount", "FsmRetryCount", "HubToSmscTime", "SmscGt", "VlrAddress", "Imsi", "RdsStatus", "AlertStatus", "SmscTt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.Telco.Types.SMPP), global::BlockPlus.Telco.Types.SMPP.Parser, new[]{ "Response", "RetryCount", "OperatorMsgId", "ResponseStatus" }, null, new[]{ typeof(global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE), typeof(global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE_STATUS) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.DBInfo), global::BlockPlus.DBInfo.Parser, new[]{ "Table" }, null, new[]{ typeof(global::BlockPlus.DBInfo.Types.TABLE) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.PlatformErrorInfo), global::BlockPlus.PlatformErrorInfo.Parser, new[]{ "ErrorSource", "ErrorCode", "ErrorMessage", "ErrorTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.SMSBuffer), global::BlockPlus.SMSBuffer.Parser, new[]{ "ClientInterface", "ServerInterface", "RouteInfo", "Telco", "DrInfo", "RetryInfo", "DbInfo", "PlatformErrorInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BlockPlus.SMS), global::BlockPlus.SMS.Parser, new[]{ "SmsBuffers" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    /// <summary>
    //// To store incoming message data from all client interfaces
    /// </summary>
    public sealed partial class ClientInterface : pb::IMessage<ClientInterface>
    {
        private static readonly pb::MessageParser<ClientInterface> _parser = new pb::MessageParser<ClientInterface>(() => new ClientInterface());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClientInterface> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientInterface()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientInterface(ClientInterface other) : this()
        {
            sourceTon_ = other.sourceTon_;
            sourceNpi_ = other.sourceNpi_;
            sourceAddress_ = other.sourceAddress_;
            destinationTon_ = other.destinationTon_;
            destinationNpi_ = other.destinationNpi_;
            destinationAddress_ = other.destinationAddress_;
            udh_ = other.udh_;
            protocolId_ = other.protocolId_;
            scheduleTime_ = other.scheduleTime_;
            validityTime_ = other.validityTime_;
            isDrRequested_ = other.isDrRequested_;
            dcs_ = other.dcs_;
            message_ = other.message_;
            messageLength_ = other.messageLength_;
            businessEventUrl_ = other.businessEventUrl_;
            mcc_ = other.mcc_;
            mnc_ = other.mnc_;
            phonePrefix_ = other.phonePrefix_;
            messageHash_ = other.messageHash_;
            entityId_ = other.entityId_;
            templateId_ = other.templateId_;
            isVariableContent_ = other.isVariableContent_;
            delimiter_ = other.delimiter_;
            tag_ = other.tag_;
            requestId_ = other.requestId_;
            msgType_ = other.msgType_;
            bulkDestinationAddresses_ = other.bulkDestinationAddresses_;
            submittedUid_ = other.submittedUid_;
            isDestinationMasked_ = other.isDestinationMasked_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClientInterface Clone()
        {
            return new ClientInterface(this);
        }

        /// <summary>Field number for the "source_ton" field.</summary>
        public const int SourceTonFieldNumber = 1;
        private int sourceTon_;
        /// <summary>
        //// Type of number for source address.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SourceTon
        {
            get { return sourceTon_; }
            set
            {
                sourceTon_ = value;
            }
        }

        /// <summary>Field number for the "source_npi" field.</summary>
        public const int SourceNpiFieldNumber = 2;
        private int sourceNpi_;
        /// <summary>
        //// Numbering plan indicator for source address.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SourceNpi
        {
            get { return sourceNpi_; }
            set
            {
                sourceNpi_ = value;
            }
        }

        /// <summary>Field number for the "source_address" field.</summary>
        public const int SourceAddressFieldNumber = 3;
        private string sourceAddress_ = "";
        /// <summary>
        //// Origination address of the message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SourceAddress
        {
            get { return sourceAddress_; }
            set
            {
                sourceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "destination_ton" field.</summary>
        public const int DestinationTonFieldNumber = 4;
        private int destinationTon_;
        /// <summary>
        //// Type of number for destination address.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DestinationTon
        {
            get { return destinationTon_; }
            set
            {
                destinationTon_ = value;
            }
        }

        /// <summary>Field number for the "destination_npi" field.</summary>
        public const int DestinationNpiFieldNumber = 5;
        private int destinationNpi_;
        /// <summary>
        //// Numbering plan indicator for destination address.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DestinationNpi
        {
            get { return destinationNpi_; }
            set
            {
                destinationNpi_ = value;
            }
        }

        /// <summary>Field number for the "destination_address" field.</summary>
        public const int DestinationAddressFieldNumber = 6;
        private ulong destinationAddress_;
        /// <summary>
        //// Destination address of the message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong DestinationAddress
        {
            get { return destinationAddress_; }
            set
            {
                destinationAddress_ = value;
            }
        }

        /// <summary>Field number for the "udh" field.</summary>
        public const int UdhFieldNumber = 7;
        private int udh_;
        /// <summary>
        //// User defined header for all non short messages
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Udh
        {
            get { return udh_; }
            set
            {
                udh_ = value;
            }
        }

        /// <summary>Field number for the "protocol_id" field.</summary>
        public const int ProtocolIdFieldNumber = 8;
        private int protocolId_;
        /// <summary>
        //// Protocol identifier.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ProtocolId
        {
            get { return protocolId_; }
            set
            {
                protocolId_ = value;
            }
        }

        /// <summary>Field number for the "schedule_time" field.</summary>
        public const int ScheduleTimeFieldNumber = 9;
        private ulong scheduleTime_;
        /// <summary>
        //// SMS scheduled time in unix timestamp.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ScheduleTime
        {
            get { return scheduleTime_; }
            set
            {
                scheduleTime_ = value;
            }
        }

        /// <summary>Field number for the "validity_time" field.</summary>
        public const int ValidityTimeFieldNumber = 10;
        private ulong validityTime_;
        /// <summary>
        //// SMS validity time in unix timestamp, if not set  checked/assigned by scrubbing engine.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ValidityTime
        {
            get { return validityTime_; }
            set
            {
                validityTime_ = value;
            }
        }

        /// <summary>Field number for the "is_dr_requested" field.</summary>
        public const int IsDrRequestedFieldNumber = 11;
        private bool isDrRequested_;
        /// <summary>
        //// Is DR requested for the message in the incoming packet.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsDrRequested
        {
            get { return isDrRequested_; }
            set
            {
                isDrRequested_ = value;
            }
        }

        /// <summary>Field number for the "dcs" field.</summary>
        public const int DcsFieldNumber = 12;
        private int dcs_;
        /// <summary>
        //// Data coding scheme of the message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Dcs
        {
            get { return dcs_; }
            set
            {
                dcs_ = value;
            }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 13;
        private pb::ByteString message_ = pb::ByteString.Empty;
        /// <summary>
        //// Actual message content.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "message_length" field.</summary>
        public const int MessageLengthFieldNumber = 14;
        private int messageLength_;
        /// <summary>
        //// Actual message content length, also rechecked/reassigned by SMPP Server.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MessageLength
        {
            get { return messageLength_; }
            set
            {
                messageLength_ = value;
            }
        }

        /// <summary>Field number for the "business_event_url" field.</summary>
        public const int BusinessEventUrlFieldNumber = 15;
        private string businessEventUrl_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BusinessEventUrl
        {
            get { return businessEventUrl_; }
            set
            {
                businessEventUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "mcc" field.</summary>
        public const int MccFieldNumber = 16;
        private int mcc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Mcc
        {
            get { return mcc_; }
            set
            {
                mcc_ = value;
            }
        }

        /// <summary>Field number for the "mnc" field.</summary>
        public const int MncFieldNumber = 17;
        private int mnc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Mnc
        {
            get { return mnc_; }
            set
            {
                mnc_ = value;
            }
        }

        /// <summary>Field number for the "phone_prefix" field.</summary>
        public const int PhonePrefixFieldNumber = 18;
        private string phonePrefix_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PhonePrefix
        {
            get { return phonePrefix_; }
            set
            {
                phonePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "message_hash" field.</summary>
        public const int MessageHashFieldNumber = 19;
        private string messageHash_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MessageHash
        {
            get { return messageHash_; }
            set
            {
                messageHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "entity_id" field.</summary>
        public const int EntityIdFieldNumber = 20;
        private ulong entityId_;
        /// <summary>
        //// Unique id of an entity.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong EntityId
        {
            get { return entityId_; }
            set
            {
                entityId_ = value;
            }
        }

        /// <summary>Field number for the "template_id" field.</summary>
        public const int TemplateIdFieldNumber = 21;
        private ulong templateId_;
        /// <summary>
        //// Unique id of the message template.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TemplateId
        {
            get { return templateId_; }
            set
            {
                templateId_ = value;
            }
        }

        /// <summary>Field number for the "is_variable_content" field.</summary>
        public const int IsVariableContentFieldNumber = 22;
        private bool isVariableContent_;
        /// <summary>
        //// Is the content a complete message or variable message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsVariableContent
        {
            get { return isVariableContent_; }
            set
            {
                isVariableContent_ = value;
            }
        }

        /// <summary>Field number for the "delimiter" field.</summary>
        public const int DelimiterFieldNumber = 23;
        private string delimiter_ = "";
        /// <summary>
        //// Delimiter used in the message, generally a single character like "|" or ","
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Delimiter
        {
            get { return delimiter_; }
            set
            {
                delimiter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "tag" field.</summary>
        public const int TagFieldNumber = 24;
        private string tag_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Tag
        {
            get { return tag_; }
            set
            {
                tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "request_id" field.</summary>
        public const int RequestIdFieldNumber = 25;
        private string requestId_ = "";
        /// <summary>
        /// unique uuid RequestID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RequestId
        {
            get { return requestId_; }
            set
            {
                requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "msg_type" field.</summary>
        public const int MsgTypeFieldNumber = 26;
        private global::BlockPlus.ClientInterface.Types.MSG_TYPE msgType_ = global::BlockPlus.ClientInterface.Types.MSG_TYPE.Unknown;
        /// <summary>
        //// To identify if the message is trans/promo/service (TemplateType in DLT)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.ClientInterface.Types.MSG_TYPE MsgType
        {
            get { return msgType_; }
            set
            {
                msgType_ = value;
            }
        }

        /// <summary>Field number for the "bulk_destination_addresses" field.</summary>
        public const int BulkDestinationAddressesFieldNumber = 27;
        private string bulkDestinationAddresses_ = "";
        /// <summary>
        /// comma separated bulk destination addresses
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string BulkDestinationAddresses
        {
            get { return bulkDestinationAddresses_; }
            set
            {
                bulkDestinationAddresses_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "submitted_uid" field.</summary>
        public const int SubmittedUidFieldNumber = 28;
        private string submittedUid_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SubmittedUid
        {
            get { return submittedUid_; }
            set
            {
                submittedUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "is_destination_masked" field.</summary>
        public const int IsDestinationMaskedFieldNumber = 29;
        private bool isDestinationMasked_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsDestinationMasked
        {
            get { return isDestinationMasked_; }
            set
            {
                isDestinationMasked_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ClientInterface);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClientInterface other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SourceTon != other.SourceTon) return false;
            if (SourceNpi != other.SourceNpi) return false;
            if (SourceAddress != other.SourceAddress) return false;
            if (DestinationTon != other.DestinationTon) return false;
            if (DestinationNpi != other.DestinationNpi) return false;
            if (DestinationAddress != other.DestinationAddress) return false;
            if (Udh != other.Udh) return false;
            if (ProtocolId != other.ProtocolId) return false;
            if (ScheduleTime != other.ScheduleTime) return false;
            if (ValidityTime != other.ValidityTime) return false;
            if (IsDrRequested != other.IsDrRequested) return false;
            if (Dcs != other.Dcs) return false;
            if (Message != other.Message) return false;
            if (MessageLength != other.MessageLength) return false;
            if (BusinessEventUrl != other.BusinessEventUrl) return false;
            if (Mcc != other.Mcc) return false;
            if (Mnc != other.Mnc) return false;
            if (PhonePrefix != other.PhonePrefix) return false;
            if (MessageHash != other.MessageHash) return false;
            if (EntityId != other.EntityId) return false;
            if (TemplateId != other.TemplateId) return false;
            if (IsVariableContent != other.IsVariableContent) return false;
            if (Delimiter != other.Delimiter) return false;
            if (Tag != other.Tag) return false;
            if (RequestId != other.RequestId) return false;
            if (MsgType != other.MsgType) return false;
            if (BulkDestinationAddresses != other.BulkDestinationAddresses) return false;
            if (SubmittedUid != other.SubmittedUid) return false;
            if (IsDestinationMasked != other.IsDestinationMasked) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SourceTon != 0) hash ^= SourceTon.GetHashCode();
            if (SourceNpi != 0) hash ^= SourceNpi.GetHashCode();
            if (SourceAddress.Length != 0) hash ^= SourceAddress.GetHashCode();
            if (DestinationTon != 0) hash ^= DestinationTon.GetHashCode();
            if (DestinationNpi != 0) hash ^= DestinationNpi.GetHashCode();
            if (DestinationAddress != 0UL) hash ^= DestinationAddress.GetHashCode();
            if (Udh != 0) hash ^= Udh.GetHashCode();
            if (ProtocolId != 0) hash ^= ProtocolId.GetHashCode();
            if (ScheduleTime != 0UL) hash ^= ScheduleTime.GetHashCode();
            if (ValidityTime != 0UL) hash ^= ValidityTime.GetHashCode();
            if (IsDrRequested != false) hash ^= IsDrRequested.GetHashCode();
            if (Dcs != 0) hash ^= Dcs.GetHashCode();
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            if (MessageLength != 0) hash ^= MessageLength.GetHashCode();
            if (BusinessEventUrl.Length != 0) hash ^= BusinessEventUrl.GetHashCode();
            if (Mcc != 0) hash ^= Mcc.GetHashCode();
            if (Mnc != 0) hash ^= Mnc.GetHashCode();
            if (PhonePrefix.Length != 0) hash ^= PhonePrefix.GetHashCode();
            if (MessageHash.Length != 0) hash ^= MessageHash.GetHashCode();
            if (EntityId != 0UL) hash ^= EntityId.GetHashCode();
            if (TemplateId != 0UL) hash ^= TemplateId.GetHashCode();
            if (IsVariableContent != false) hash ^= IsVariableContent.GetHashCode();
            if (Delimiter.Length != 0) hash ^= Delimiter.GetHashCode();
            if (Tag.Length != 0) hash ^= Tag.GetHashCode();
            if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
            if (MsgType != global::BlockPlus.ClientInterface.Types.MSG_TYPE.Unknown) hash ^= MsgType.GetHashCode();
            if (BulkDestinationAddresses.Length != 0) hash ^= BulkDestinationAddresses.GetHashCode();
            if (SubmittedUid.Length != 0) hash ^= SubmittedUid.GetHashCode();
            if (IsDestinationMasked != false) hash ^= IsDestinationMasked.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SourceTon != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(SourceTon);
            }
            if (SourceNpi != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(SourceNpi);
            }
            if (SourceAddress.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(SourceAddress);
            }
            if (DestinationTon != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(DestinationTon);
            }
            if (DestinationNpi != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(DestinationNpi);
            }
            if (DestinationAddress != 0UL)
            {
                output.WriteRawTag(48);
                output.WriteUInt64(DestinationAddress);
            }
            if (Udh != 0)
            {
                output.WriteRawTag(56);
                output.WriteInt32(Udh);
            }
            if (ProtocolId != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(ProtocolId);
            }
            if (ScheduleTime != 0UL)
            {
                output.WriteRawTag(72);
                output.WriteUInt64(ScheduleTime);
            }
            if (ValidityTime != 0UL)
            {
                output.WriteRawTag(80);
                output.WriteUInt64(ValidityTime);
            }
            if (IsDrRequested != false)
            {
                output.WriteRawTag(88);
                output.WriteBool(IsDrRequested);
            }
            if (Dcs != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(Dcs);
            }
            if (Message.Length != 0)
            {
                output.WriteRawTag(106);
                output.WriteBytes(Message);
            }
            if (MessageLength != 0)
            {
                output.WriteRawTag(112);
                output.WriteInt32(MessageLength);
            }
            if (BusinessEventUrl.Length != 0)
            {
                output.WriteRawTag(122);
                output.WriteString(BusinessEventUrl);
            }
            if (Mcc != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteInt32(Mcc);
            }
            if (Mnc != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteInt32(Mnc);
            }
            if (PhonePrefix.Length != 0)
            {
                output.WriteRawTag(146, 1);
                output.WriteString(PhonePrefix);
            }
            if (MessageHash.Length != 0)
            {
                output.WriteRawTag(154, 1);
                output.WriteString(MessageHash);
            }
            if (EntityId != 0UL)
            {
                output.WriteRawTag(160, 1);
                output.WriteUInt64(EntityId);
            }
            if (TemplateId != 0UL)
            {
                output.WriteRawTag(168, 1);
                output.WriteUInt64(TemplateId);
            }
            if (IsVariableContent != false)
            {
                output.WriteRawTag(176, 1);
                output.WriteBool(IsVariableContent);
            }
            if (Delimiter.Length != 0)
            {
                output.WriteRawTag(186, 1);
                output.WriteString(Delimiter);
            }
            if (Tag.Length != 0)
            {
                output.WriteRawTag(194, 1);
                output.WriteString(Tag);
            }
            if (RequestId.Length != 0)
            {
                output.WriteRawTag(202, 1);
                output.WriteString(RequestId);
            }
            if (MsgType != global::BlockPlus.ClientInterface.Types.MSG_TYPE.Unknown)
            {
                output.WriteRawTag(208, 1);
                output.WriteEnum((int)MsgType);
            }
            if (BulkDestinationAddresses.Length != 0)
            {
                output.WriteRawTag(218, 1);
                output.WriteString(BulkDestinationAddresses);
            }
            if (SubmittedUid.Length != 0)
            {
                output.WriteRawTag(226, 1);
                output.WriteString(SubmittedUid);
            }
            if (IsDestinationMasked != false)
            {
                output.WriteRawTag(232, 1);
                output.WriteBool(IsDestinationMasked);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SourceTon != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceTon);
            }
            if (SourceNpi != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceNpi);
            }
            if (SourceAddress.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceAddress);
            }
            if (DestinationTon != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationTon);
            }
            if (DestinationNpi != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestinationNpi);
            }
            if (DestinationAddress != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DestinationAddress);
            }
            if (Udh != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Udh);
            }
            if (ProtocolId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolId);
            }
            if (ScheduleTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScheduleTime);
            }
            if (ValidityTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ValidityTime);
            }
            if (IsDrRequested != false)
            {
                size += 1 + 1;
            }
            if (Dcs != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dcs);
            }
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
            }
            if (MessageLength != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageLength);
            }
            if (BusinessEventUrl.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(BusinessEventUrl);
            }
            if (Mcc != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Mcc);
            }
            if (Mnc != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Mnc);
            }
            if (PhonePrefix.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(PhonePrefix);
            }
            if (MessageHash.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(MessageHash);
            }
            if (EntityId != 0UL)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt64Size(EntityId);
            }
            if (TemplateId != 0UL)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt64Size(TemplateId);
            }
            if (IsVariableContent != false)
            {
                size += 2 + 1;
            }
            if (Delimiter.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(Delimiter);
            }
            if (Tag.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag);
            }
            if (RequestId.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(RequestId);
            }
            if (MsgType != global::BlockPlus.ClientInterface.Types.MSG_TYPE.Unknown)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)MsgType);
            }
            if (BulkDestinationAddresses.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(BulkDestinationAddresses);
            }
            if (SubmittedUid.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(SubmittedUid);
            }
            if (IsDestinationMasked != false)
            {
                size += 2 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClientInterface other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SourceTon != 0)
            {
                SourceTon = other.SourceTon;
            }
            if (other.SourceNpi != 0)
            {
                SourceNpi = other.SourceNpi;
            }
            if (other.SourceAddress.Length != 0)
            {
                SourceAddress = other.SourceAddress;
            }
            if (other.DestinationTon != 0)
            {
                DestinationTon = other.DestinationTon;
            }
            if (other.DestinationNpi != 0)
            {
                DestinationNpi = other.DestinationNpi;
            }
            if (other.DestinationAddress != 0UL)
            {
                DestinationAddress = other.DestinationAddress;
            }
            if (other.Udh != 0)
            {
                Udh = other.Udh;
            }
            if (other.ProtocolId != 0)
            {
                ProtocolId = other.ProtocolId;
            }
            if (other.ScheduleTime != 0UL)
            {
                ScheduleTime = other.ScheduleTime;
            }
            if (other.ValidityTime != 0UL)
            {
                ValidityTime = other.ValidityTime;
            }
            if (other.IsDrRequested != false)
            {
                IsDrRequested = other.IsDrRequested;
            }
            if (other.Dcs != 0)
            {
                Dcs = other.Dcs;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
            if (other.MessageLength != 0)
            {
                MessageLength = other.MessageLength;
            }
            if (other.BusinessEventUrl.Length != 0)
            {
                BusinessEventUrl = other.BusinessEventUrl;
            }
            if (other.Mcc != 0)
            {
                Mcc = other.Mcc;
            }
            if (other.Mnc != 0)
            {
                Mnc = other.Mnc;
            }
            if (other.PhonePrefix.Length != 0)
            {
                PhonePrefix = other.PhonePrefix;
            }
            if (other.MessageHash.Length != 0)
            {
                MessageHash = other.MessageHash;
            }
            if (other.EntityId != 0UL)
            {
                EntityId = other.EntityId;
            }
            if (other.TemplateId != 0UL)
            {
                TemplateId = other.TemplateId;
            }
            if (other.IsVariableContent != false)
            {
                IsVariableContent = other.IsVariableContent;
            }
            if (other.Delimiter.Length != 0)
            {
                Delimiter = other.Delimiter;
            }
            if (other.Tag.Length != 0)
            {
                Tag = other.Tag;
            }
            if (other.RequestId.Length != 0)
            {
                RequestId = other.RequestId;
            }
            if (other.MsgType != global::BlockPlus.ClientInterface.Types.MSG_TYPE.Unknown)
            {
                MsgType = other.MsgType;
            }
            if (other.BulkDestinationAddresses.Length != 0)
            {
                BulkDestinationAddresses = other.BulkDestinationAddresses;
            }
            if (other.SubmittedUid.Length != 0)
            {
                SubmittedUid = other.SubmittedUid;
            }
            if (other.IsDestinationMasked != false)
            {
                IsDestinationMasked = other.IsDestinationMasked;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            SourceTon = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            SourceNpi = input.ReadInt32();
                            break;
                        }
                    case 26:
                        {
                            SourceAddress = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            DestinationTon = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            DestinationNpi = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            DestinationAddress = input.ReadUInt64();
                            break;
                        }
                    case 56:
                        {
                            Udh = input.ReadInt32();
                            break;
                        }
                    case 64:
                        {
                            ProtocolId = input.ReadInt32();
                            break;
                        }
                    case 72:
                        {
                            ScheduleTime = input.ReadUInt64();
                            break;
                        }
                    case 80:
                        {
                            ValidityTime = input.ReadUInt64();
                            break;
                        }
                    case 88:
                        {
                            IsDrRequested = input.ReadBool();
                            break;
                        }
                    case 96:
                        {
                            Dcs = input.ReadInt32();
                            break;
                        }
                    case 106:
                        {
                            Message = input.ReadBytes();
                            break;
                        }
                    case 112:
                        {
                            MessageLength = input.ReadInt32();
                            break;
                        }
                    case 122:
                        {
                            BusinessEventUrl = input.ReadString();
                            break;
                        }
                    case 128:
                        {
                            Mcc = input.ReadInt32();
                            break;
                        }
                    case 136:
                        {
                            Mnc = input.ReadInt32();
                            break;
                        }
                    case 146:
                        {
                            PhonePrefix = input.ReadString();
                            break;
                        }
                    case 154:
                        {
                            MessageHash = input.ReadString();
                            break;
                        }
                    case 160:
                        {
                            EntityId = input.ReadUInt64();
                            break;
                        }
                    case 168:
                        {
                            TemplateId = input.ReadUInt64();
                            break;
                        }
                    case 176:
                        {
                            IsVariableContent = input.ReadBool();
                            break;
                        }
                    case 186:
                        {
                            Delimiter = input.ReadString();
                            break;
                        }
                    case 194:
                        {
                            Tag = input.ReadString();
                            break;
                        }
                    case 202:
                        {
                            RequestId = input.ReadString();
                            break;
                        }
                    case 208:
                        {
                            MsgType = (global::BlockPlus.ClientInterface.Types.MSG_TYPE)input.ReadEnum();
                            break;
                        }
                    case 218:
                        {
                            BulkDestinationAddresses = input.ReadString();
                            break;
                        }
                    case 226:
                        {
                            SubmittedUid = input.ReadString();
                            break;
                        }
                    case 232:
                        {
                            IsDestinationMasked = input.ReadBool();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ClientInterface message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum MSG_TYPE
            {
                /// <summary>
                /// The first enum value must be zero in proto3
                /// </summary>
                [pbr::OriginalName("UNKNOWN")] Unknown = 0,
                [pbr::OriginalName("PROMO")] Promo = 1,
                [pbr::OriginalName("TRANS")] Trans = 2,
                [pbr::OriginalName("SERVICE_IMPLICIT")] ServiceImplicit = 3,
                [pbr::OriginalName("SERVICE_EXPLICIT")] ServiceExplicit = 4,
            }

        }
        #endregion

    }

    /// <summary>
    //// To store server level information of client and message.
    /// </summary>
    public sealed partial class ServerInterface : pb::IMessage<ServerInterface>
    {
        private static readonly pb::MessageParser<ServerInterface> _parser = new pb::MessageParser<ServerInterface>(() => new ServerInterface());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ServerInterface> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerInterface()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerInterface(ServerInterface other) : this()
        {
            header_ = other.header_;
            acceptedTime_ = other.acceptedTime_;
            messageId_ = other.messageId_;
            telemarketerId_ = other.telemarketerId_;
            accountId_ = other.accountId_;
            accountType_ = other.accountType_;
            interfaceType_ = other.interfaceType_;
            serverId_ = other.serverId_;
            accountMsgType_ = other.accountMsgType_;
            applicationId_ = other.applicationId_;
            drToClientTime_ = other.drToClientTime_;
            drRetryCount_ = other.drRetryCount_;
            drAckTime_ = other.drAckTime_;
            drResponseTime_ = other.drResponseTime_;
            isBufferedDr_ = other.isBufferedDr_;
            enterpriseId_ = other.enterpriseId_;
            queuedTime_ = other.queuedTime_;
            elapsedTimeinsecPlatform_ = other.elapsedTimeinsecPlatform_;
            smppAccountId_ = other.smppAccountId_;
            enterprisedcId_ = other.enterprisedcId_;
            telcodcId_ = other.telcodcId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ServerInterface Clone()
        {
            return new ServerInterface(this);
        }

        /// <summary>Field number for the "header" field.</summary>
        public const int HeaderFieldNumber = 1;
        private global::BlockPlus.ServerInterface.Types.HEADER header_ = global::BlockPlus.ServerInterface.Types.HEADER.Unknown;
        /// <summary>
        //// SMS Header.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.ServerInterface.Types.HEADER Header
        {
            get { return header_; }
            set
            {
                header_ = value;
            }
        }

        /// <summary>Field number for the "accepted_Time" field.</summary>
        public const int AcceptedTimeFieldNumber = 2;
        private ulong acceptedTime_;
        /// <summary>
        //// Message received time in unix timestamp from client.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong AcceptedTime
        {
            get { return acceptedTime_; }
            set
            {
                acceptedTime_ = value;
            }
        }

        /// <summary>Field number for the "message_id" field.</summary>
        public const int MessageIdFieldNumber = 3;
        private ulong messageId_;
        /// <summary>
        //// Unique id given to the message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong MessageId
        {
            get { return messageId_; }
            set
            {
                messageId_ = value;
            }
        }

        /// <summary>Field number for the "telemarketer_id" field.</summary>
        public const int TelemarketerIdFieldNumber = 4;
        private int telemarketerId_;
        /// <summary>
        //// To identify from which telemarketer the message was received.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TelemarketerId
        {
            get { return telemarketerId_; }
            set
            {
                telemarketerId_ = value;
            }
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 5;
        private int accountId_;
        /// <summary>
        //// To identify through which telemarkter account the message was received .
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AccountId
        {
            get { return accountId_; }
            set
            {
                accountId_ = value;
            }
        }

        /// <summary>Field number for the "account_type" field.</summary>
        public const int AccountTypeFieldNumber = 6;
        private global::BlockPlus.ServerInterface.Types.ACCOUNT_TYPE accountType_ = global::BlockPlus.ServerInterface.Types.ACCOUNT_TYPE.Unknown;
        /// <summary>
        /// new variable
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.ServerInterface.Types.ACCOUNT_TYPE AccountType
        {
            get { return accountType_; }
            set
            {
                accountType_ = value;
            }
        }

        /// <summary>Field number for the "interface_type" field.</summary>
        public const int InterfaceTypeFieldNumber = 7;
        private global::BlockPlus.ServerInterface.Types.TYPE interfaceType_ = global::BlockPlus.ServerInterface.Types.TYPE.Unknown;
        /// <summary>
        //// Type of interface SMPP/HTTP/Portal Campaigns/Portal File Scrubbing/FTP..
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.ServerInterface.Types.TYPE InterfaceType
        {
            get { return interfaceType_; }
            set
            {
                interfaceType_ = value;
            }
        }

        /// <summary>Field number for the "server_id" field.</summary>
        public const int ServerIdFieldNumber = 8;
        private int serverId_;
        /// <summary>
        //// Id of the server on which message was received.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ServerId
        {
            get { return serverId_; }
            set
            {
                serverId_ = value;
            }
        }

        /// <summary>Field number for the "account_msg_type" field.</summary>
        public const int AccountMsgTypeFieldNumber = 9;
        private global::BlockPlus.ServerInterface.Types.ACCOUNT_MSG_TYPE accountMsgType_ = global::BlockPlus.ServerInterface.Types.ACCOUNT_MSG_TYPE.Promo;
        /// <summary>
        //// Account type of binded account
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.ServerInterface.Types.ACCOUNT_MSG_TYPE AccountMsgType
        {
            get { return accountMsgType_; }
            set
            {
                accountMsgType_ = value;
            }
        }

        /// <summary>Field number for the "application_id" field.</summary>
        public const int ApplicationIdFieldNumber = 10;
        private int applicationId_;
        /// <summary>
        //// Id of the application i.e SMPPServerID or HTTPServerID etc.. which processed the message
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ApplicationId
        {
            get { return applicationId_; }
            set
            {
                applicationId_ = value;
            }
        }

        /// <summary>Field number for the "dr_to_client_time" field.</summary>
        public const int DrToClientTimeFieldNumber = 11;
        private ulong drToClientTime_;
        /// <summary>
        //// Time at which DR was sent to client.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong DrToClientTime
        {
            get { return drToClientTime_; }
            set
            {
                drToClientTime_ = value;
            }
        }

        /// <summary>Field number for the "dr_retry_count" field.</summary>
        public const int DrRetryCountFieldNumber = 12;
        private int drRetryCount_;
        /// <summary>
        //// To track number of DR retry attempts, negative value means the DR is expired.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DrRetryCount
        {
            get { return drRetryCount_; }
            set
            {
                drRetryCount_ = value;
            }
        }

        /// <summary>Field number for the "dr_ack_time" field.</summary>
        public const int DrAckTimeFieldNumber = 13;
        private int drAckTime_;
        /// <summary>
        //// Time in secs, difference between DRRecievedTime and DRSubmitTime
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DrAckTime
        {
            get { return drAckTime_; }
            set
            {
                drAckTime_ = value;
            }
        }

        /// <summary>Field number for the "dr_response_time" field.</summary>
        public const int DrResponseTimeFieldNumber = 14;
        private ulong drResponseTime_;
        /// <summary>
        //// Time at which DeliverSM reponse recieved
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong DrResponseTime
        {
            get { return drResponseTime_; }
            set
            {
                drResponseTime_ = value;
            }
        }

        /// <summary>Field number for the "is_buffered_dr" field.</summary>
        public const int IsBufferedDrFieldNumber = 15;
        private bool isBufferedDr_;
        /// <summary>
        //// If buffered dr enabled for the account then does dr retry
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsBufferedDr
        {
            get { return isBufferedDr_; }
            set
            {
                isBufferedDr_ = value;
            }
        }

        /// <summary>Field number for the "enterprise_id" field.</summary>
        public const int EnterpriseIdFieldNumber = 16;
        private int enterpriseId_;
        /// <summary>
        //// To identify through which enterprise the message was received .
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EnterpriseId
        {
            get { return enterpriseId_; }
            set
            {
                enterpriseId_ = value;
            }
        }

        /// <summary>Field number for the "queued_time" field.</summary>
        public const int QueuedTimeFieldNumber = 17;
        private ulong queuedTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong QueuedTime
        {
            get { return queuedTime_; }
            set
            {
                queuedTime_ = value;
            }
        }

        /// <summary>Field number for the "elapsed_timeinsec_platform" field.</summary>
        public const int ElapsedTimeinsecPlatformFieldNumber = 18;
        private uint elapsedTimeinsecPlatform_;
        /// <summary>
        ///iElapsedtimeInSecPlatform
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ElapsedTimeinsecPlatform
        {
            get { return elapsedTimeinsecPlatform_; }
            set
            {
                elapsedTimeinsecPlatform_ = value;
            }
        }

        /// <summary>Field number for the "smpp_account_id" field.</summary>
        public const int SmppAccountIdFieldNumber = 19;
        private int smppAccountId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SmppAccountId
        {
            get { return smppAccountId_; }
            set
            {
                smppAccountId_ = value;
            }
        }

        /// <summary>Field number for the "enterprisedc_id" field.</summary>
        public const int EnterprisedcIdFieldNumber = 20;
        private int enterprisedcId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EnterprisedcId
        {
            get { return enterprisedcId_; }
            set
            {
                enterprisedcId_ = value;
            }
        }

        /// <summary>Field number for the "telcodc_id" field.</summary>
        public const int TelcodcIdFieldNumber = 21;
        private int telcodcId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TelcodcId
        {
            get { return telcodcId_; }
            set
            {
                telcodcId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ServerInterface);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ServerInterface other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Header != other.Header) return false;
            if (AcceptedTime != other.AcceptedTime) return false;
            if (MessageId != other.MessageId) return false;
            if (TelemarketerId != other.TelemarketerId) return false;
            if (AccountId != other.AccountId) return false;
            if (AccountType != other.AccountType) return false;
            if (InterfaceType != other.InterfaceType) return false;
            if (ServerId != other.ServerId) return false;
            if (AccountMsgType != other.AccountMsgType) return false;
            if (ApplicationId != other.ApplicationId) return false;
            if (DrToClientTime != other.DrToClientTime) return false;
            if (DrRetryCount != other.DrRetryCount) return false;
            if (DrAckTime != other.DrAckTime) return false;
            if (DrResponseTime != other.DrResponseTime) return false;
            if (IsBufferedDr != other.IsBufferedDr) return false;
            if (EnterpriseId != other.EnterpriseId) return false;
            if (QueuedTime != other.QueuedTime) return false;
            if (ElapsedTimeinsecPlatform != other.ElapsedTimeinsecPlatform) return false;
            if (SmppAccountId != other.SmppAccountId) return false;
            if (EnterprisedcId != other.EnterprisedcId) return false;
            if (TelcodcId != other.TelcodcId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Header != global::BlockPlus.ServerInterface.Types.HEADER.Unknown) hash ^= Header.GetHashCode();
            if (AcceptedTime != 0UL) hash ^= AcceptedTime.GetHashCode();
            if (MessageId != 0UL) hash ^= MessageId.GetHashCode();
            if (TelemarketerId != 0) hash ^= TelemarketerId.GetHashCode();
            if (AccountId != 0) hash ^= AccountId.GetHashCode();
            if (AccountType != global::BlockPlus.ServerInterface.Types.ACCOUNT_TYPE.Unknown) hash ^= AccountType.GetHashCode();
            if (InterfaceType != global::BlockPlus.ServerInterface.Types.TYPE.Unknown) hash ^= InterfaceType.GetHashCode();
            if (ServerId != 0) hash ^= ServerId.GetHashCode();
            if (AccountMsgType != global::BlockPlus.ServerInterface.Types.ACCOUNT_MSG_TYPE.Promo) hash ^= AccountMsgType.GetHashCode();
            if (ApplicationId != 0) hash ^= ApplicationId.GetHashCode();
            if (DrToClientTime != 0UL) hash ^= DrToClientTime.GetHashCode();
            if (DrRetryCount != 0) hash ^= DrRetryCount.GetHashCode();
            if (DrAckTime != 0) hash ^= DrAckTime.GetHashCode();
            if (DrResponseTime != 0UL) hash ^= DrResponseTime.GetHashCode();
            if (IsBufferedDr != false) hash ^= IsBufferedDr.GetHashCode();
            if (EnterpriseId != 0) hash ^= EnterpriseId.GetHashCode();
            if (QueuedTime != 0UL) hash ^= QueuedTime.GetHashCode();
            if (ElapsedTimeinsecPlatform != 0) hash ^= ElapsedTimeinsecPlatform.GetHashCode();
            if (SmppAccountId != 0) hash ^= SmppAccountId.GetHashCode();
            if (EnterprisedcId != 0) hash ^= EnterprisedcId.GetHashCode();
            if (TelcodcId != 0) hash ^= TelcodcId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Header != global::BlockPlus.ServerInterface.Types.HEADER.Unknown)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Header);
            }
            if (AcceptedTime != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(AcceptedTime);
            }
            if (MessageId != 0UL)
            {
                output.WriteRawTag(24);
                output.WriteUInt64(MessageId);
            }
            if (TelemarketerId != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(TelemarketerId);
            }
            if (AccountId != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(AccountId);
            }
            if (AccountType != global::BlockPlus.ServerInterface.Types.ACCOUNT_TYPE.Unknown)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)AccountType);
            }
            if (InterfaceType != global::BlockPlus.ServerInterface.Types.TYPE.Unknown)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)InterfaceType);
            }
            if (ServerId != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(ServerId);
            }
            if (AccountMsgType != global::BlockPlus.ServerInterface.Types.ACCOUNT_MSG_TYPE.Promo)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)AccountMsgType);
            }
            if (ApplicationId != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(ApplicationId);
            }
            if (DrToClientTime != 0UL)
            {
                output.WriteRawTag(88);
                output.WriteUInt64(DrToClientTime);
            }
            if (DrRetryCount != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(DrRetryCount);
            }
            if (DrAckTime != 0)
            {
                output.WriteRawTag(104);
                output.WriteInt32(DrAckTime);
            }
            if (DrResponseTime != 0UL)
            {
                output.WriteRawTag(112);
                output.WriteUInt64(DrResponseTime);
            }
            if (IsBufferedDr != false)
            {
                output.WriteRawTag(120);
                output.WriteBool(IsBufferedDr);
            }
            if (EnterpriseId != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteInt32(EnterpriseId);
            }
            if (QueuedTime != 0UL)
            {
                output.WriteRawTag(136, 1);
                output.WriteUInt64(QueuedTime);
            }
            if (ElapsedTimeinsecPlatform != 0)
            {
                output.WriteRawTag(144, 1);
                output.WriteUInt32(ElapsedTimeinsecPlatform);
            }
            if (SmppAccountId != 0)
            {
                output.WriteRawTag(152, 1);
                output.WriteInt32(SmppAccountId);
            }
            if (EnterprisedcId != 0)
            {
                output.WriteRawTag(160, 1);
                output.WriteInt32(EnterprisedcId);
            }
            if (TelcodcId != 0)
            {
                output.WriteRawTag(168, 1);
                output.WriteInt32(TelcodcId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Header != global::BlockPlus.ServerInterface.Types.HEADER.Unknown)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Header);
            }
            if (AcceptedTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AcceptedTime);
            }
            if (MessageId != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MessageId);
            }
            if (TelemarketerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TelemarketerId);
            }
            if (AccountId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
            }
            if (AccountType != global::BlockPlus.ServerInterface.Types.ACCOUNT_TYPE.Unknown)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AccountType);
            }
            if (InterfaceType != global::BlockPlus.ServerInterface.Types.TYPE.Unknown)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)InterfaceType);
            }
            if (ServerId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
            }
            if (AccountMsgType != global::BlockPlus.ServerInterface.Types.ACCOUNT_MSG_TYPE.Promo)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)AccountMsgType);
            }
            if (ApplicationId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplicationId);
            }
            if (DrToClientTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DrToClientTime);
            }
            if (DrRetryCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrRetryCount);
            }
            if (DrAckTime != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(DrAckTime);
            }
            if (DrResponseTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DrResponseTime);
            }
            if (IsBufferedDr != false)
            {
                size += 1 + 1;
            }
            if (EnterpriseId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnterpriseId);
            }
            if (QueuedTime != 0UL)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt64Size(QueuedTime);
            }
            if (ElapsedTimeinsecPlatform != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ElapsedTimeinsecPlatform);
            }
            if (SmppAccountId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(SmppAccountId);
            }
            if (EnterprisedcId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnterprisedcId);
            }
            if (TelcodcId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(TelcodcId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ServerInterface other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Header != global::BlockPlus.ServerInterface.Types.HEADER.Unknown)
            {
                Header = other.Header;
            }
            if (other.AcceptedTime != 0UL)
            {
                AcceptedTime = other.AcceptedTime;
            }
            if (other.MessageId != 0UL)
            {
                MessageId = other.MessageId;
            }
            if (other.TelemarketerId != 0)
            {
                TelemarketerId = other.TelemarketerId;
            }
            if (other.AccountId != 0)
            {
                AccountId = other.AccountId;
            }
            if (other.AccountType != global::BlockPlus.ServerInterface.Types.ACCOUNT_TYPE.Unknown)
            {
                AccountType = other.AccountType;
            }
            if (other.InterfaceType != global::BlockPlus.ServerInterface.Types.TYPE.Unknown)
            {
                InterfaceType = other.InterfaceType;
            }
            if (other.ServerId != 0)
            {
                ServerId = other.ServerId;
            }
            if (other.AccountMsgType != global::BlockPlus.ServerInterface.Types.ACCOUNT_MSG_TYPE.Promo)
            {
                AccountMsgType = other.AccountMsgType;
            }
            if (other.ApplicationId != 0)
            {
                ApplicationId = other.ApplicationId;
            }
            if (other.DrToClientTime != 0UL)
            {
                DrToClientTime = other.DrToClientTime;
            }
            if (other.DrRetryCount != 0)
            {
                DrRetryCount = other.DrRetryCount;
            }
            if (other.DrAckTime != 0)
            {
                DrAckTime = other.DrAckTime;
            }
            if (other.DrResponseTime != 0UL)
            {
                DrResponseTime = other.DrResponseTime;
            }
            if (other.IsBufferedDr != false)
            {
                IsBufferedDr = other.IsBufferedDr;
            }
            if (other.EnterpriseId != 0)
            {
                EnterpriseId = other.EnterpriseId;
            }
            if (other.QueuedTime != 0UL)
            {
                QueuedTime = other.QueuedTime;
            }
            if (other.ElapsedTimeinsecPlatform != 0)
            {
                ElapsedTimeinsecPlatform = other.ElapsedTimeinsecPlatform;
            }
            if (other.SmppAccountId != 0)
            {
                SmppAccountId = other.SmppAccountId;
            }
            if (other.EnterprisedcId != 0)
            {
                EnterprisedcId = other.EnterprisedcId;
            }
            if (other.TelcodcId != 0)
            {
                TelcodcId = other.TelcodcId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Header = (global::BlockPlus.ServerInterface.Types.HEADER)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            AcceptedTime = input.ReadUInt64();
                            break;
                        }
                    case 24:
                        {
                            MessageId = input.ReadUInt64();
                            break;
                        }
                    case 32:
                        {
                            TelemarketerId = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            AccountId = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            AccountType = (global::BlockPlus.ServerInterface.Types.ACCOUNT_TYPE)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            InterfaceType = (global::BlockPlus.ServerInterface.Types.TYPE)input.ReadEnum();
                            break;
                        }
                    case 64:
                        {
                            ServerId = input.ReadInt32();
                            break;
                        }
                    case 72:
                        {
                            AccountMsgType = (global::BlockPlus.ServerInterface.Types.ACCOUNT_MSG_TYPE)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            ApplicationId = input.ReadInt32();
                            break;
                        }
                    case 88:
                        {
                            DrToClientTime = input.ReadUInt64();
                            break;
                        }
                    case 96:
                        {
                            DrRetryCount = input.ReadInt32();
                            break;
                        }
                    case 104:
                        {
                            DrAckTime = input.ReadInt32();
                            break;
                        }
                    case 112:
                        {
                            DrResponseTime = input.ReadUInt64();
                            break;
                        }
                    case 120:
                        {
                            IsBufferedDr = input.ReadBool();
                            break;
                        }
                    case 128:
                        {
                            EnterpriseId = input.ReadInt32();
                            break;
                        }
                    case 136:
                        {
                            QueuedTime = input.ReadUInt64();
                            break;
                        }
                    case 144:
                        {
                            ElapsedTimeinsecPlatform = input.ReadUInt32();
                            break;
                        }
                    case 152:
                        {
                            SmppAccountId = input.ReadInt32();
                            break;
                        }
                    case 160:
                        {
                            EnterprisedcId = input.ReadInt32();
                            break;
                        }
                    case 168:
                        {
                            TelcodcId = input.ReadInt32();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ServerInterface message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum HEADER
            {
                /// <summary>
                /// The first enum value must be zero in proto3
                /// </summary>
                [pbr::OriginalName("HEADER_UNKNOWN")] Unknown = 0,
                /// <summary>
                /// MSG_TYPE::MT_SUBMIT_SM=1
                /// </summary>
                [pbr::OriginalName("SUBMIT_SM")] SubmitSm = 1,
                /// <summary>
                /// MSG_TYPE::MT_DELIVERY_SM=2/SMS_TYPE::ST_DELIVERYSM = 100; 
                /// </summary>
                [pbr::OriginalName("DELIVERY_SM")] DeliverySm = 2,
                /// <summary>
                /// MSG_TYPE::MT_DELIVERY_RPT=3/SMS_TYPE::ST_DELIVERYREPORT = 101; 
                /// </summary>
                [pbr::OriginalName("DELIVERY_RPT")] DeliveryRpt = 3,
                /// <summary>
                /// MSG_TYPE::MT_RETRY_MSG=4
                /// </summary>
                [pbr::OriginalName("RETRY_MSG")] RetryMsg = 4,
                /// <summary>
                /// SMS_TYPE::ST_SCALERT= 102        
                /// </summary>
                [pbr::OriginalName("SCALERT")] Scalert = 5,
                /// <summary>
                ///   SMS_TYPE::ST_ERROR= 103
                /// </summary>
                [pbr::OriginalName("ERROR")] Error = 6,
            }

            /// <summary>
            //// To identify if the account is prepaid or postpaid.
            /// </summary>
            public enum ACCOUNT_TYPE
            {
                [pbr::OriginalName("ACCOUNT_TYPE_UNKNOWN")] Unknown = 0,
                [pbr::OriginalName("POSTPAID")] Postpaid = 1,
                [pbr::OriginalName("PREPAID")] Prepaid = 2,
            }

            public enum TYPE
            {
                /// <summary>
                /// The first enum value must be zero in proto3
                /// </summary>
                [pbr::OriginalName("TYPE_UNKNOWN")] Unknown = 0,
                [pbr::OriginalName("SMPP")] Smpp = 1,
                [pbr::OriginalName("HTTP")] Http = 2,
                [pbr::OriginalName("PORTAL_CAMPAIGN")] PortalCampaign = 3,
                [pbr::OriginalName("PORTAL_SCRUBBING")] PortalScrubbing = 4,
                [pbr::OriginalName("FTP")] Ftp = 5,
            }

            /// <summary>
            /// TODO ?? discuss on this
            /// </summary>
            public enum ACCOUNT_MSG_TYPE
            {
                [pbr::OriginalName("PROMO")] Promo = 0,
                [pbr::OriginalName("TRANS")] Trans = 1,
                [pbr::OriginalName("OTP")] Otp = 2,
                [pbr::OriginalName("SERV")] Serv = 3,
                [pbr::OriginalName("GOVT")] Govt = 4,
            }

        }
        #endregion

    }

    /// <summary>
    //// To store routing information.
    /// </summary>
    public sealed partial class RouteInfo : pb::IMessage<RouteInfo>
    {
        private static readonly pb::MessageParser<RouteInfo> _parser = new pb::MessageParser<RouteInfo>(() => new RouteInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RouteInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RouteInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RouteInfo(RouteInfo other) : this()
        {
            destOperatorId_ = other.destOperatorId_;
            routeId_ = other.routeId_;
            actualRouteId_ = other.actualRouteId_;
            aggregatorId_ = other.aggregatorId_;
            enterpriseRouteId_ = other.enterpriseRouteId_;
            deQueuedTime_ = other.deQueuedTime_;
            routerProcessedTime_ = other.routerProcessedTime_;
            lrn_ = other.lrn_;
            lmrefId_ = other.lmrefId_;
            referenceNo_ = other.referenceNo_;
            numberOfParts_ = other.numberOfParts_;
            partNumber_ = other.partNumber_;
            isExpiredPart_ = other.isExpiredPart_;
            preferenceReference_ = other.preferenceReference_;
            consentReference_ = other.consentReference_;
            scrubToken_ = other.scrubToken_;
            telcoId_ = other.telcoId_;
            telcoRouteId_ = other.telcoRouteId_;
            destTelcoId_ = other.destTelcoId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RouteInfo Clone()
        {
            return new RouteInfo(this);
        }

        /// <summary>Field number for the "dest_operator_id" field.</summary>
        public const int DestOperatorIdFieldNumber = 1;
        private int destOperatorId_;
        /// <summary>
        //// Operator id of destination address.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DestOperatorId
        {
            get { return destOperatorId_; }
            set
            {
                destOperatorId_ = value;
            }
        }

        /// <summary>Field number for the "route_id" field.</summary>
        public const int RouteIdFieldNumber = 2;
        private int routeId_;
        /// <summary>
        //// Route id on which the message has to go.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RouteId
        {
            get { return routeId_; }
            set
            {
                routeId_ = value;
            }
        }

        /// <summary>Field number for the "actual_route_id" field.</summary>
        public const int ActualRouteIdFieldNumber = 3;
        private int actualRouteId_;
        /// <summary>
        //// The first route id decided in the routing.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ActualRouteId
        {
            get { return actualRouteId_; }
            set
            {
                actualRouteId_ = value;
            }
        }

        /// <summary>Field number for the "aggregator_id" field.</summary>
        public const int AggregatorIdFieldNumber = 4;
        private int aggregatorId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AggregatorId
        {
            get { return aggregatorId_; }
            set
            {
                aggregatorId_ = value;
            }
        }

        /// <summary>Field number for the "enterprise_route_id" field.</summary>
        public const int EnterpriseRouteIdFieldNumber = 5;
        private int enterpriseRouteId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EnterpriseRouteId
        {
            get { return enterpriseRouteId_; }
            set
            {
                enterpriseRouteId_ = value;
            }
        }

        /// <summary>Field number for the "de_queued_time" field.</summary>
        public const int DeQueuedTimeFieldNumber = 6;
        private ulong deQueuedTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong DeQueuedTime
        {
            get { return deQueuedTime_; }
            set
            {
                deQueuedTime_ = value;
            }
        }

        /// <summary>Field number for the "router_processed_time" field.</summary>
        public const int RouterProcessedTimeFieldNumber = 7;
        private ulong routerProcessedTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RouterProcessedTime
        {
            get { return routerProcessedTime_; }
            set
            {
                routerProcessedTime_ = value;
            }
        }

        /// <summary>Field number for the "lrn" field.</summary>
        public const int LrnFieldNumber = 8;
        private int lrn_;
        /// <summary>
        //// Local routing number
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Lrn
        {
            get { return lrn_; }
            set
            {
                lrn_ = value;
            }
        }

        /// <summary>Field number for the "lmref_id" field.</summary>
        public const int LmrefIdFieldNumber = 9;
        private ulong lmrefId_;
        /// <summary>
        //// Long message reference id.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong LmrefId
        {
            get { return lmrefId_; }
            set
            {
                lmrefId_ = value;
            }
        }

        /// <summary>Field number for the "reference_no" field.</summary>
        public const int ReferenceNoFieldNumber = 10;
        private int referenceNo_;
        /// <summary>
        //// Message reference number from udh.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ReferenceNo
        {
            get { return referenceNo_; }
            set
            {
                referenceNo_ = value;
            }
        }

        /// <summary>Field number for the "number_of_parts" field.</summary>
        public const int NumberOfPartsFieldNumber = 11;
        private int numberOfParts_;
        /// <summary>
        //// Total number of parts from udh.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NumberOfParts
        {
            get { return numberOfParts_; }
            set
            {
                numberOfParts_ = value;
            }
        }

        /// <summary>Field number for the "part_number" field.</summary>
        public const int PartNumberFieldNumber = 12;
        private int partNumber_;
        /// <summary>
        //// Current part number from udh.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int PartNumber
        {
            get { return partNumber_; }
            set
            {
                partNumber_ = value;
            }
        }

        /// <summary>Field number for the "is_expired_part" field.</summary>
        public const int IsExpiredPartFieldNumber = 13;
        private bool isExpiredPart_;
        /// <summary>
        //// If true indicates that all long message parts are not received on time to form it as a batch, so this message can be processed for delivery.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsExpiredPart
        {
            get { return isExpiredPart_; }
            set
            {
                isExpiredPart_ = value;
            }
        }

        /// <summary>Field number for the "preference_reference" field.</summary>
        public const int PreferenceReferenceFieldNumber = 14;
        private ulong preferenceReference_;
        /// <summary>
        //// Preference reference number if message was forwarded due to preference match
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong PreferenceReference
        {
            get { return preferenceReference_; }
            set
            {
                preferenceReference_ = value;
            }
        }

        /// <summary>Field number for the "consent_reference" field.</summary>
        public const int ConsentReferenceFieldNumber = 15;
        private ulong consentReference_;
        /// <summary>
        //// Consent reference number if message was forwarded due to consent match
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ConsentReference
        {
            get { return consentReference_; }
            set
            {
                consentReference_ = value;
            }
        }

        /// <summary>Field number for the "scrub_token" field.</summary>
        public const int ScrubTokenFieldNumber = 16;
        private string scrubToken_ = "";
        /// <summary>
        //// Unique token for a group of messages decided by Scrubber, can be msgid or uuid
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ScrubToken
        {
            get { return scrubToken_; }
            set
            {
                scrubToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "telco_id" field.</summary>
        public const int TelcoIdFieldNumber = 17;
        private int telcoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TelcoId
        {
            get { return telcoId_; }
            set
            {
                telcoId_ = value;
            }
        }

        /// <summary>Field number for the "telco_route_id" field.</summary>
        public const int TelcoRouteIdFieldNumber = 18;
        private int telcoRouteId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TelcoRouteId
        {
            get { return telcoRouteId_; }
            set
            {
                telcoRouteId_ = value;
            }
        }

        /// <summary>Field number for the "dest_telco_id" field.</summary>
        public const int DestTelcoIdFieldNumber = 19;
        private int destTelcoId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int DestTelcoId
        {
            get { return destTelcoId_; }
            set
            {
                destTelcoId_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RouteInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RouteInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (DestOperatorId != other.DestOperatorId) return false;
            if (RouteId != other.RouteId) return false;
            if (ActualRouteId != other.ActualRouteId) return false;
            if (AggregatorId != other.AggregatorId) return false;
            if (EnterpriseRouteId != other.EnterpriseRouteId) return false;
            if (DeQueuedTime != other.DeQueuedTime) return false;
            if (RouterProcessedTime != other.RouterProcessedTime) return false;
            if (Lrn != other.Lrn) return false;
            if (LmrefId != other.LmrefId) return false;
            if (ReferenceNo != other.ReferenceNo) return false;
            if (NumberOfParts != other.NumberOfParts) return false;
            if (PartNumber != other.PartNumber) return false;
            if (IsExpiredPart != other.IsExpiredPart) return false;
            if (PreferenceReference != other.PreferenceReference) return false;
            if (ConsentReference != other.ConsentReference) return false;
            if (ScrubToken != other.ScrubToken) return false;
            if (TelcoId != other.TelcoId) return false;
            if (TelcoRouteId != other.TelcoRouteId) return false;
            if (DestTelcoId != other.DestTelcoId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (DestOperatorId != 0) hash ^= DestOperatorId.GetHashCode();
            if (RouteId != 0) hash ^= RouteId.GetHashCode();
            if (ActualRouteId != 0) hash ^= ActualRouteId.GetHashCode();
            if (AggregatorId != 0) hash ^= AggregatorId.GetHashCode();
            if (EnterpriseRouteId != 0) hash ^= EnterpriseRouteId.GetHashCode();
            if (DeQueuedTime != 0UL) hash ^= DeQueuedTime.GetHashCode();
            if (RouterProcessedTime != 0UL) hash ^= RouterProcessedTime.GetHashCode();
            if (Lrn != 0) hash ^= Lrn.GetHashCode();
            if (LmrefId != 0UL) hash ^= LmrefId.GetHashCode();
            if (ReferenceNo != 0) hash ^= ReferenceNo.GetHashCode();
            if (NumberOfParts != 0) hash ^= NumberOfParts.GetHashCode();
            if (PartNumber != 0) hash ^= PartNumber.GetHashCode();
            if (IsExpiredPart != false) hash ^= IsExpiredPart.GetHashCode();
            if (PreferenceReference != 0UL) hash ^= PreferenceReference.GetHashCode();
            if (ConsentReference != 0UL) hash ^= ConsentReference.GetHashCode();
            if (ScrubToken.Length != 0) hash ^= ScrubToken.GetHashCode();
            if (TelcoId != 0) hash ^= TelcoId.GetHashCode();
            if (TelcoRouteId != 0) hash ^= TelcoRouteId.GetHashCode();
            if (DestTelcoId != 0) hash ^= DestTelcoId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (DestOperatorId != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(DestOperatorId);
            }
            if (RouteId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(RouteId);
            }
            if (ActualRouteId != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(ActualRouteId);
            }
            if (AggregatorId != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(AggregatorId);
            }
            if (EnterpriseRouteId != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(EnterpriseRouteId);
            }
            if (DeQueuedTime != 0UL)
            {
                output.WriteRawTag(48);
                output.WriteUInt64(DeQueuedTime);
            }
            if (RouterProcessedTime != 0UL)
            {
                output.WriteRawTag(56);
                output.WriteUInt64(RouterProcessedTime);
            }
            if (Lrn != 0)
            {
                output.WriteRawTag(64);
                output.WriteInt32(Lrn);
            }
            if (LmrefId != 0UL)
            {
                output.WriteRawTag(72);
                output.WriteUInt64(LmrefId);
            }
            if (ReferenceNo != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt32(ReferenceNo);
            }
            if (NumberOfParts != 0)
            {
                output.WriteRawTag(88);
                output.WriteInt32(NumberOfParts);
            }
            if (PartNumber != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(PartNumber);
            }
            if (IsExpiredPart != false)
            {
                output.WriteRawTag(104);
                output.WriteBool(IsExpiredPart);
            }
            if (PreferenceReference != 0UL)
            {
                output.WriteRawTag(112);
                output.WriteUInt64(PreferenceReference);
            }
            if (ConsentReference != 0UL)
            {
                output.WriteRawTag(120);
                output.WriteUInt64(ConsentReference);
            }
            if (ScrubToken.Length != 0)
            {
                output.WriteRawTag(130, 1);
                output.WriteString(ScrubToken);
            }
            if (TelcoId != 0)
            {
                output.WriteRawTag(136, 1);
                output.WriteInt32(TelcoId);
            }
            if (TelcoRouteId != 0)
            {
                output.WriteRawTag(144, 1);
                output.WriteInt32(TelcoRouteId);
            }
            if (DestTelcoId != 0)
            {
                output.WriteRawTag(152, 1);
                output.WriteInt32(DestTelcoId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (DestOperatorId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(DestOperatorId);
            }
            if (RouteId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RouteId);
            }
            if (ActualRouteId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActualRouteId);
            }
            if (AggregatorId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AggregatorId);
            }
            if (EnterpriseRouteId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnterpriseRouteId);
            }
            if (DeQueuedTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeQueuedTime);
            }
            if (RouterProcessedTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RouterProcessedTime);
            }
            if (Lrn != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lrn);
            }
            if (LmrefId != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LmrefId);
            }
            if (ReferenceNo != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReferenceNo);
            }
            if (NumberOfParts != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfParts);
            }
            if (PartNumber != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(PartNumber);
            }
            if (IsExpiredPart != false)
            {
                size += 1 + 1;
            }
            if (PreferenceReference != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PreferenceReference);
            }
            if (ConsentReference != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ConsentReference);
            }
            if (ScrubToken.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(ScrubToken);
            }
            if (TelcoId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(TelcoId);
            }
            if (TelcoRouteId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(TelcoRouteId);
            }
            if (DestTelcoId != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(DestTelcoId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RouteInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.DestOperatorId != 0)
            {
                DestOperatorId = other.DestOperatorId;
            }
            if (other.RouteId != 0)
            {
                RouteId = other.RouteId;
            }
            if (other.ActualRouteId != 0)
            {
                ActualRouteId = other.ActualRouteId;
            }
            if (other.AggregatorId != 0)
            {
                AggregatorId = other.AggregatorId;
            }
            if (other.EnterpriseRouteId != 0)
            {
                EnterpriseRouteId = other.EnterpriseRouteId;
            }
            if (other.DeQueuedTime != 0UL)
            {
                DeQueuedTime = other.DeQueuedTime;
            }
            if (other.RouterProcessedTime != 0UL)
            {
                RouterProcessedTime = other.RouterProcessedTime;
            }
            if (other.Lrn != 0)
            {
                Lrn = other.Lrn;
            }
            if (other.LmrefId != 0UL)
            {
                LmrefId = other.LmrefId;
            }
            if (other.ReferenceNo != 0)
            {
                ReferenceNo = other.ReferenceNo;
            }
            if (other.NumberOfParts != 0)
            {
                NumberOfParts = other.NumberOfParts;
            }
            if (other.PartNumber != 0)
            {
                PartNumber = other.PartNumber;
            }
            if (other.IsExpiredPart != false)
            {
                IsExpiredPart = other.IsExpiredPart;
            }
            if (other.PreferenceReference != 0UL)
            {
                PreferenceReference = other.PreferenceReference;
            }
            if (other.ConsentReference != 0UL)
            {
                ConsentReference = other.ConsentReference;
            }
            if (other.ScrubToken.Length != 0)
            {
                ScrubToken = other.ScrubToken;
            }
            if (other.TelcoId != 0)
            {
                TelcoId = other.TelcoId;
            }
            if (other.TelcoRouteId != 0)
            {
                TelcoRouteId = other.TelcoRouteId;
            }
            if (other.DestTelcoId != 0)
            {
                DestTelcoId = other.DestTelcoId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            DestOperatorId = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            RouteId = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            ActualRouteId = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            AggregatorId = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            EnterpriseRouteId = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            DeQueuedTime = input.ReadUInt64();
                            break;
                        }
                    case 56:
                        {
                            RouterProcessedTime = input.ReadUInt64();
                            break;
                        }
                    case 64:
                        {
                            Lrn = input.ReadInt32();
                            break;
                        }
                    case 72:
                        {
                            LmrefId = input.ReadUInt64();
                            break;
                        }
                    case 80:
                        {
                            ReferenceNo = input.ReadInt32();
                            break;
                        }
                    case 88:
                        {
                            NumberOfParts = input.ReadInt32();
                            break;
                        }
                    case 96:
                        {
                            PartNumber = input.ReadInt32();
                            break;
                        }
                    case 104:
                        {
                            IsExpiredPart = input.ReadBool();
                            break;
                        }
                    case 112:
                        {
                            PreferenceReference = input.ReadUInt64();
                            break;
                        }
                    case 120:
                        {
                            ConsentReference = input.ReadUInt64();
                            break;
                        }
                    case 130:
                        {
                            ScrubToken = input.ReadString();
                            break;
                        }
                    case 136:
                        {
                            TelcoId = input.ReadInt32();
                            break;
                        }
                    case 144:
                        {
                            TelcoRouteId = input.ReadInt32();
                            break;
                        }
                    case 152:
                        {
                            DestTelcoId = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    //// To store retrial information.
    /// </summary>
    public sealed partial class RetryInfo : pb::IMessage<RetryInfo>
    {
        private static readonly pb::MessageParser<RetryInfo> _parser = new pb::MessageParser<RetryInfo>(() => new RetryInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RetryInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetryInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetryInfo(RetryInfo other) : this()
        {
            isRetryEnabled_ = other.isRetryEnabled_;
            retryTime_ = other.retryTime_;
            nextRetryTime_ = other.nextRetryTime_;
            retryCount_ = other.retryCount_;
            maxRetryCount_ = other.maxRetryCount_;
            alternateRetryCount_ = other.alternateRetryCount_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RetryInfo Clone()
        {
            return new RetryInfo(this);
        }

        /// <summary>Field number for the "is_retry_enabled" field.</summary>
        public const int IsRetryEnabledFieldNumber = 1;
        private bool isRetryEnabled_;
        /// <summary>
        //// Is retry enabled for this message or not. ?? this can be handled by DRHandler.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsRetryEnabled
        {
            get { return isRetryEnabled_; }
            set
            {
                isRetryEnabled_ = value;
            }
        }

        /// <summary>Field number for the "retry_time" field.</summary>
        public const int RetryTimeFieldNumber = 2;
        private ulong retryTime_;
        /// <summary>
        //// Time at which message was retried.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RetryTime
        {
            get { return retryTime_; }
            set
            {
                retryTime_ = value;
            }
        }

        /// <summary>Field number for the "next_retry_time" field.</summary>
        public const int NextRetryTimeFieldNumber = 3;
        private ulong nextRetryTime_;
        /// <summary>
        //// Time at which next retry will be attempted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong NextRetryTime
        {
            get { return nextRetryTime_; }
            set
            {
                nextRetryTime_ = value;
            }
        }

        /// <summary>Field number for the "retry_count" field.</summary>
        public const int RetryCountFieldNumber = 4;
        private int retryCount_;
        /// <summary>
        //// To track number of retry attempts of the message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int RetryCount
        {
            get { return retryCount_; }
            set
            {
                retryCount_ = value;
            }
        }

        /// <summary>Field number for the "max_retry_count" field.</summary>
        public const int MaxRetryCountFieldNumber = 5;
        private int maxRetryCount_;
        /// <summary>
        //// Maximum retries applicable based on retrial schema.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int MaxRetryCount
        {
            get { return maxRetryCount_; }
            set
            {
                maxRetryCount_ = value;
            }
        }

        /// <summary>Field number for the "alternate_retry_count" field.</summary>
        public const int AlternateRetryCountFieldNumber = 6;
        private int alternateRetryCount_;
        /// <summary>
        //// To track number of alternate retry attempts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int AlternateRetryCount
        {
            get { return alternateRetryCount_; }
            set
            {
                alternateRetryCount_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RetryInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RetryInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (IsRetryEnabled != other.IsRetryEnabled) return false;
            if (RetryTime != other.RetryTime) return false;
            if (NextRetryTime != other.NextRetryTime) return false;
            if (RetryCount != other.RetryCount) return false;
            if (MaxRetryCount != other.MaxRetryCount) return false;
            if (AlternateRetryCount != other.AlternateRetryCount) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (IsRetryEnabled != false) hash ^= IsRetryEnabled.GetHashCode();
            if (RetryTime != 0UL) hash ^= RetryTime.GetHashCode();
            if (NextRetryTime != 0UL) hash ^= NextRetryTime.GetHashCode();
            if (RetryCount != 0) hash ^= RetryCount.GetHashCode();
            if (MaxRetryCount != 0) hash ^= MaxRetryCount.GetHashCode();
            if (AlternateRetryCount != 0) hash ^= AlternateRetryCount.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (IsRetryEnabled != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(IsRetryEnabled);
            }
            if (RetryTime != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(RetryTime);
            }
            if (NextRetryTime != 0UL)
            {
                output.WriteRawTag(24);
                output.WriteUInt64(NextRetryTime);
            }
            if (RetryCount != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(RetryCount);
            }
            if (MaxRetryCount != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(MaxRetryCount);
            }
            if (AlternateRetryCount != 0)
            {
                output.WriteRawTag(48);
                output.WriteInt32(AlternateRetryCount);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (IsRetryEnabled != false)
            {
                size += 1 + 1;
            }
            if (RetryTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RetryTime);
            }
            if (NextRetryTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NextRetryTime);
            }
            if (RetryCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetryCount);
            }
            if (MaxRetryCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRetryCount);
            }
            if (AlternateRetryCount != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AlternateRetryCount);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RetryInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.IsRetryEnabled != false)
            {
                IsRetryEnabled = other.IsRetryEnabled;
            }
            if (other.RetryTime != 0UL)
            {
                RetryTime = other.RetryTime;
            }
            if (other.NextRetryTime != 0UL)
            {
                NextRetryTime = other.NextRetryTime;
            }
            if (other.RetryCount != 0)
            {
                RetryCount = other.RetryCount;
            }
            if (other.MaxRetryCount != 0)
            {
                MaxRetryCount = other.MaxRetryCount;
            }
            if (other.AlternateRetryCount != 0)
            {
                AlternateRetryCount = other.AlternateRetryCount;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            IsRetryEnabled = input.ReadBool();
                            break;
                        }
                    case 16:
                        {
                            RetryTime = input.ReadUInt64();
                            break;
                        }
                    case 24:
                        {
                            NextRetryTime = input.ReadUInt64();
                            break;
                        }
                    case 32:
                        {
                            RetryCount = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            MaxRetryCount = input.ReadInt32();
                            break;
                        }
                    case 48:
                        {
                            AlternateRetryCount = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    //// To store dr information, should be used by both SMSC/SMPP Clients
    /// </summary>
    public sealed partial class DRInfo : pb::IMessage<DRInfo>
    {
        private static readonly pb::MessageParser<DRInfo> _parser = new pb::MessageParser<DRInfo>(() => new DRInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DRInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DRInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DRInfo(DRInfo other) : this()
        {
            status_ = other.status_;
            errorCode_ = other.errorCode_;
            subErrorCode_ = other.subErrorCode_;
            statusTime_ = other.statusTime_;
            drReceivedTime_ = other.drReceivedTime_;
            strStatus_ = other.strStatus_;
            errorCodeHash_ = other.errorCodeHash_;
            drEncrypted_ = other.drEncrypted_;
            drHash_ = other.drHash_;
            sourceAddressReported_ = other.sourceAddressReported_;
            submitTime_ = other.submitTime_;
            elapsedTimeinsecTelco_ = other.elapsedTimeinsecTelco_;
            iMSIOperatorID_ = other.iMSIOperatorID_;
            iMSICircleID_ = other.iMSICircleID_;
            vLROperatorID_ = other.vLROperatorID_;
            vLRCircleID_ = other.vLRCircleID_;
            queuedTime_ = other.queuedTime_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DRInfo Clone()
        {
            return new DRInfo(this);
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 1;
        private global::BlockPlus.DRInfo.Types.STATUS status_ = global::BlockPlus.DRInfo.Types.STATUS.Unknown;
        /// <summary>
        //// To know high level status of the msg like DELIVERED,FAILED,EXPIRED or REJECTED. 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.DRInfo.Types.STATUS Status
        {
            get { return status_; }
            set
            {
                status_ = value;
            }
        }

        /// <summary>Field number for the "error_code" field.</summary>
        public const int ErrorCodeFieldNumber = 2;
        private int errorCode_;
        /// <summary>
        //// To identify the error of a failed message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ErrorCode
        {
            get { return errorCode_; }
            set
            {
                errorCode_ = value;
            }
        }

        /// <summary>Field number for the "sub_error_code" field.</summary>
        public const int SubErrorCodeFieldNumber = 3;
        private int subErrorCode_;
        /// <summary>
        //// To identify the sub-error of a failed message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int SubErrorCode
        {
            get { return subErrorCode_; }
            set
            {
                subErrorCode_ = value;
            }
        }

        /// <summary>Field number for the "status_time" field.</summary>
        public const int StatusTimeFieldNumber = 4;
        private ulong statusTime_;
        /// <summary>
        //// Time at which message status was received. Should be same as smsc_time from SMSCInfo
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong StatusTime
        {
            get { return statusTime_; }
            set
            {
                statusTime_ = value;
            }
        }

        /// <summary>Field number for the "dr_received_time" field.</summary>
        public const int DrReceivedTimeFieldNumber = 5;
        private ulong drReceivedTime_;
        /// <summary>
        //// Time at which message was received on hub from SMSC/SMPP Client.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong DrReceivedTime
        {
            get { return drReceivedTime_; }
            set
            {
                drReceivedTime_ = value;
            }
        }

        /// <summary>Field number for the "str_status" field.</summary>
        public const int StrStatusFieldNumber = 6;
        private string strStatus_ = "";
        /// <summary>
        /// Contains string representation of status for sending it to client. Packed by DRUpdater
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StrStatus
        {
            get { return strStatus_; }
            set
            {
                strStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "error_code_hash" field.</summary>
        public const int ErrorCodeHashFieldNumber = 7;
        private string errorCodeHash_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorCodeHash
        {
            get { return errorCodeHash_; }
            set
            {
                errorCodeHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "dr_encrypted" field.</summary>
        public const int DrEncryptedFieldNumber = 8;
        private string drEncrypted_ = "";
        /// <summary>
        //// cdr in encrypted form
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DrEncrypted
        {
            get { return drEncrypted_; }
            set
            {
                drEncrypted_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "dr_hash" field.</summary>
        public const int DrHashFieldNumber = 9;
        private string drHash_ = "";
        /// <summary>
        //// hash for cdr response
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DrHash
        {
            get { return drHash_; }
            set
            {
                drHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "source_address_reported" field.</summary>
        public const int SourceAddressReportedFieldNumber = 10;
        private string sourceAddressReported_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SourceAddressReported
        {
            get { return sourceAddressReported_; }
            set
            {
                sourceAddressReported_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "submit_time" field.</summary>
        public const int SubmitTimeFieldNumber = 11;
        private ulong submitTime_;
        /// <summary>
        //// Time at which message submitted to network i.e., information received in DR under submit date
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SubmitTime
        {
            get { return submitTime_; }
            set
            {
                submitTime_ = value;
            }
        }

        /// <summary>Field number for the "elapsed_timeinsec_telco" field.</summary>
        public const int ElapsedTimeinsecTelcoFieldNumber = 12;
        private uint elapsedTimeinsecTelco_;
        /// <summary>
        ///iElapsedtimeInSecTelco 
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ElapsedTimeinsecTelco
        {
            get { return elapsedTimeinsecTelco_; }
            set
            {
                elapsedTimeinsecTelco_ = value;
            }
        }

        /// <summary>Field number for the "IMSI_OperatorID" field.</summary>
        public const int IMSIOperatorIDFieldNumber = 13;
        private uint iMSIOperatorID_;
        /// <summary>
        /// MCC MNC Operator iIMSIOperatorID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint IMSIOperatorID
        {
            get { return iMSIOperatorID_; }
            set
            {
                iMSIOperatorID_ = value;
            }
        }

        /// <summary>Field number for the "IMSI_CircleID" field.</summary>
        public const int IMSICircleIDFieldNumber = 14;
        private uint iMSICircleID_;
        /// <summary>
        ///MCC MNC Circle iIMSICircleID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint IMSICircleID
        {
            get { return iMSICircleID_; }
            set
            {
                iMSICircleID_ = value;
            }
        }

        /// <summary>Field number for the "VLR_OperatorID" field.</summary>
        public const int VLROperatorIDFieldNumber = 15;
        private uint vLROperatorID_;
        /// <summary>
        ///VLR Operator iVLROperatorID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VLROperatorID
        {
            get { return vLROperatorID_; }
            set
            {
                vLROperatorID_ = value;
            }
        }

        /// <summary>Field number for the "VLR_CircleID" field.</summary>
        public const int VLRCircleIDFieldNumber = 16;
        private uint vLRCircleID_;
        /// <summary>
        ///VLR Circle iVLRCircleID
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint VLRCircleID
        {
            get { return vLRCircleID_; }
            set
            {
                vLRCircleID_ = value;
            }
        }

        /// <summary>Field number for the "queued_time" field.</summary>
        public const int QueuedTimeFieldNumber = 17;
        private ulong queuedTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong QueuedTime
        {
            get { return queuedTime_; }
            set
            {
                queuedTime_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DRInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DRInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Status != other.Status) return false;
            if (ErrorCode != other.ErrorCode) return false;
            if (SubErrorCode != other.SubErrorCode) return false;
            if (StatusTime != other.StatusTime) return false;
            if (DrReceivedTime != other.DrReceivedTime) return false;
            if (StrStatus != other.StrStatus) return false;
            if (ErrorCodeHash != other.ErrorCodeHash) return false;
            if (DrEncrypted != other.DrEncrypted) return false;
            if (DrHash != other.DrHash) return false;
            if (SourceAddressReported != other.SourceAddressReported) return false;
            if (SubmitTime != other.SubmitTime) return false;
            if (ElapsedTimeinsecTelco != other.ElapsedTimeinsecTelco) return false;
            if (IMSIOperatorID != other.IMSIOperatorID) return false;
            if (IMSICircleID != other.IMSICircleID) return false;
            if (VLROperatorID != other.VLROperatorID) return false;
            if (VLRCircleID != other.VLRCircleID) return false;
            if (QueuedTime != other.QueuedTime) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Status != global::BlockPlus.DRInfo.Types.STATUS.Unknown) hash ^= Status.GetHashCode();
            if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
            if (SubErrorCode != 0) hash ^= SubErrorCode.GetHashCode();
            if (StatusTime != 0UL) hash ^= StatusTime.GetHashCode();
            if (DrReceivedTime != 0UL) hash ^= DrReceivedTime.GetHashCode();
            if (StrStatus.Length != 0) hash ^= StrStatus.GetHashCode();
            if (ErrorCodeHash.Length != 0) hash ^= ErrorCodeHash.GetHashCode();
            if (DrEncrypted.Length != 0) hash ^= DrEncrypted.GetHashCode();
            if (DrHash.Length != 0) hash ^= DrHash.GetHashCode();
            if (SourceAddressReported.Length != 0) hash ^= SourceAddressReported.GetHashCode();
            if (SubmitTime != 0UL) hash ^= SubmitTime.GetHashCode();
            if (ElapsedTimeinsecTelco != 0) hash ^= ElapsedTimeinsecTelco.GetHashCode();
            if (IMSIOperatorID != 0) hash ^= IMSIOperatorID.GetHashCode();
            if (IMSICircleID != 0) hash ^= IMSICircleID.GetHashCode();
            if (VLROperatorID != 0) hash ^= VLROperatorID.GetHashCode();
            if (VLRCircleID != 0) hash ^= VLRCircleID.GetHashCode();
            if (QueuedTime != 0UL) hash ^= QueuedTime.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Status != global::BlockPlus.DRInfo.Types.STATUS.Unknown)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Status);
            }
            if (ErrorCode != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ErrorCode);
            }
            if (SubErrorCode != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(SubErrorCode);
            }
            if (StatusTime != 0UL)
            {
                output.WriteRawTag(32);
                output.WriteUInt64(StatusTime);
            }
            if (DrReceivedTime != 0UL)
            {
                output.WriteRawTag(40);
                output.WriteUInt64(DrReceivedTime);
            }
            if (StrStatus.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(StrStatus);
            }
            if (ErrorCodeHash.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(ErrorCodeHash);
            }
            if (DrEncrypted.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(DrEncrypted);
            }
            if (DrHash.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteString(DrHash);
            }
            if (SourceAddressReported.Length != 0)
            {
                output.WriteRawTag(82);
                output.WriteString(SourceAddressReported);
            }
            if (SubmitTime != 0UL)
            {
                output.WriteRawTag(88);
                output.WriteUInt64(SubmitTime);
            }
            if (ElapsedTimeinsecTelco != 0)
            {
                output.WriteRawTag(96);
                output.WriteUInt32(ElapsedTimeinsecTelco);
            }
            if (IMSIOperatorID != 0)
            {
                output.WriteRawTag(104);
                output.WriteUInt32(IMSIOperatorID);
            }
            if (IMSICircleID != 0)
            {
                output.WriteRawTag(112);
                output.WriteUInt32(IMSICircleID);
            }
            if (VLROperatorID != 0)
            {
                output.WriteRawTag(120);
                output.WriteUInt32(VLROperatorID);
            }
            if (VLRCircleID != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteUInt32(VLRCircleID);
            }
            if (QueuedTime != 0UL)
            {
                output.WriteRawTag(136, 1);
                output.WriteUInt64(QueuedTime);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Status != global::BlockPlus.DRInfo.Types.STATUS.Unknown)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Status);
            }
            if (ErrorCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
            }
            if (SubErrorCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubErrorCode);
            }
            if (StatusTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StatusTime);
            }
            if (DrReceivedTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DrReceivedTime);
            }
            if (StrStatus.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(StrStatus);
            }
            if (ErrorCodeHash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorCodeHash);
            }
            if (DrEncrypted.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DrEncrypted);
            }
            if (DrHash.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DrHash);
            }
            if (SourceAddressReported.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceAddressReported);
            }
            if (SubmitTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubmitTime);
            }
            if (ElapsedTimeinsecTelco != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ElapsedTimeinsecTelco);
            }
            if (IMSIOperatorID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IMSIOperatorID);
            }
            if (IMSICircleID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IMSICircleID);
            }
            if (VLROperatorID != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VLROperatorID);
            }
            if (VLRCircleID != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VLRCircleID);
            }
            if (QueuedTime != 0UL)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt64Size(QueuedTime);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DRInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Status != global::BlockPlus.DRInfo.Types.STATUS.Unknown)
            {
                Status = other.Status;
            }
            if (other.ErrorCode != 0)
            {
                ErrorCode = other.ErrorCode;
            }
            if (other.SubErrorCode != 0)
            {
                SubErrorCode = other.SubErrorCode;
            }
            if (other.StatusTime != 0UL)
            {
                StatusTime = other.StatusTime;
            }
            if (other.DrReceivedTime != 0UL)
            {
                DrReceivedTime = other.DrReceivedTime;
            }
            if (other.StrStatus.Length != 0)
            {
                StrStatus = other.StrStatus;
            }
            if (other.ErrorCodeHash.Length != 0)
            {
                ErrorCodeHash = other.ErrorCodeHash;
            }
            if (other.DrEncrypted.Length != 0)
            {
                DrEncrypted = other.DrEncrypted;
            }
            if (other.DrHash.Length != 0)
            {
                DrHash = other.DrHash;
            }
            if (other.SourceAddressReported.Length != 0)
            {
                SourceAddressReported = other.SourceAddressReported;
            }
            if (other.SubmitTime != 0UL)
            {
                SubmitTime = other.SubmitTime;
            }
            if (other.ElapsedTimeinsecTelco != 0)
            {
                ElapsedTimeinsecTelco = other.ElapsedTimeinsecTelco;
            }
            if (other.IMSIOperatorID != 0)
            {
                IMSIOperatorID = other.IMSIOperatorID;
            }
            if (other.IMSICircleID != 0)
            {
                IMSICircleID = other.IMSICircleID;
            }
            if (other.VLROperatorID != 0)
            {
                VLROperatorID = other.VLROperatorID;
            }
            if (other.VLRCircleID != 0)
            {
                VLRCircleID = other.VLRCircleID;
            }
            if (other.QueuedTime != 0UL)
            {
                QueuedTime = other.QueuedTime;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Status = (global::BlockPlus.DRInfo.Types.STATUS)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            ErrorCode = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            SubErrorCode = input.ReadInt32();
                            break;
                        }
                    case 32:
                        {
                            StatusTime = input.ReadUInt64();
                            break;
                        }
                    case 40:
                        {
                            DrReceivedTime = input.ReadUInt64();
                            break;
                        }
                    case 50:
                        {
                            StrStatus = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            ErrorCodeHash = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            DrEncrypted = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            DrHash = input.ReadString();
                            break;
                        }
                    case 82:
                        {
                            SourceAddressReported = input.ReadString();
                            break;
                        }
                    case 88:
                        {
                            SubmitTime = input.ReadUInt64();
                            break;
                        }
                    case 96:
                        {
                            ElapsedTimeinsecTelco = input.ReadUInt32();
                            break;
                        }
                    case 104:
                        {
                            IMSIOperatorID = input.ReadUInt32();
                            break;
                        }
                    case 112:
                        {
                            IMSICircleID = input.ReadUInt32();
                            break;
                        }
                    case 120:
                        {
                            VLROperatorID = input.ReadUInt32();
                            break;
                        }
                    case 128:
                        {
                            VLRCircleID = input.ReadUInt32();
                            break;
                        }
                    case 136:
                        {
                            QueuedTime = input.ReadUInt64();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DRInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum STATUS
            {
                /// <summary>
                /// The first enum value must be zero in proto3
                /// </summary>
                [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
                /// <summary>
                /// MSG_STATUS::MS_DELIVERED=2/SMS_STATUS::SMS_SUCCESS=200 // delivered to destination
                /// </summary>
                [pbr::OriginalName("DELIVERED")] Delivered = 1,
                /// <summary>
                /// MSG_STATUS::MS_FAILED=-1/SMS_STATUS::SMS_FAIL = 201  // failed to deliver to destination
                /// </summary>
                [pbr::OriginalName("FAILED")] Failed = 2,
                /// <summary>
                /// MSG_STATUS::MS_EXPIRED=-2 // expired due to validity or max retries reached
                /// </summary>
                [pbr::OriginalName("EXPIRED")] Expired = 3,
                /// <summary>
                /// MSG_STATUS::MS_REJECTED=-3 // rejeceted as smppserver or scrubbing level
                /// </summary>
                [pbr::OriginalName("REJECTED")] Rejected = 4,
            }

        }
        #endregion

    }

    /// <summary>
    //// To store Telco level information including SMSC,SMPP
    /// </summary>
    public sealed partial class Telco : pb::IMessage<Telco>
    {
        private static readonly pb::MessageParser<Telco> _parser = new pb::MessageParser<Telco>(() => new Telco());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Telco> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Telco()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Telco(Telco other) : this()
        {
            pickupTime_ = other.pickupTime_;
            submitTime_ = other.submitTime_;
            isTagSet_ = other.isTagSet_;
            smsc_ = other.smsc_ != null ? other.smsc_.Clone() : null;
            smpp_ = other.smpp_ != null ? other.smpp_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Telco Clone()
        {
            return new Telco(this);
        }

        /// <summary>Field number for the "pickup_time" field.</summary>
        public const int PickupTimeFieldNumber = 1;
        private ulong pickupTime_;
        /// <summary>
        //// Time at which msg was read from SMSC queue.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong PickupTime
        {
            get { return pickupTime_; }
            set
            {
                pickupTime_ = value;
            }
        }

        /// <summary>Field number for the "submit_time" field.</summary>
        public const int SubmitTimeFieldNumber = 2;
        private ulong submitTime_;
        /// <summary>
        //// Time at which message submitted to telco.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong SubmitTime
        {
            get { return submitTime_; }
            set
            {
                submitTime_ = value;
            }
        }

        /// <summary>Field number for the "is_tag_set" field.</summary>
        public const int IsTagSetFieldNumber = 3;
        private bool isTagSet_;
        /// <summary>
        //// To set message priority
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsTagSet
        {
            get { return isTagSet_; }
            set
            {
                isTagSet_ = value;
            }
        }

        /// <summary>Field number for the "smsc" field.</summary>
        public const int SmscFieldNumber = 4;
        private global::BlockPlus.Telco.Types.SMSC smsc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.Telco.Types.SMSC Smsc
        {
            get { return smsc_; }
            set
            {
                smsc_ = value;
            }
        }

        /// <summary>Field number for the "smpp" field.</summary>
        public const int SmppFieldNumber = 5;
        private global::BlockPlus.Telco.Types.SMPP smpp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.Telco.Types.SMPP Smpp
        {
            get { return smpp_; }
            set
            {
                smpp_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Telco);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Telco other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PickupTime != other.PickupTime) return false;
            if (SubmitTime != other.SubmitTime) return false;
            if (IsTagSet != other.IsTagSet) return false;
            if (!object.Equals(Smsc, other.Smsc)) return false;
            if (!object.Equals(Smpp, other.Smpp)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (PickupTime != 0UL) hash ^= PickupTime.GetHashCode();
            if (SubmitTime != 0UL) hash ^= SubmitTime.GetHashCode();
            if (IsTagSet != false) hash ^= IsTagSet.GetHashCode();
            if (smsc_ != null) hash ^= Smsc.GetHashCode();
            if (smpp_ != null) hash ^= Smpp.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (PickupTime != 0UL)
            {
                output.WriteRawTag(8);
                output.WriteUInt64(PickupTime);
            }
            if (SubmitTime != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(SubmitTime);
            }
            if (IsTagSet != false)
            {
                output.WriteRawTag(24);
                output.WriteBool(IsTagSet);
            }
            if (smsc_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Smsc);
            }
            if (smpp_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(Smpp);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (PickupTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PickupTime);
            }
            if (SubmitTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SubmitTime);
            }
            if (IsTagSet != false)
            {
                size += 1 + 1;
            }
            if (smsc_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Smsc);
            }
            if (smpp_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Smpp);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Telco other)
        {
            if (other == null)
            {
                return;
            }
            if (other.PickupTime != 0UL)
            {
                PickupTime = other.PickupTime;
            }
            if (other.SubmitTime != 0UL)
            {
                SubmitTime = other.SubmitTime;
            }
            if (other.IsTagSet != false)
            {
                IsTagSet = other.IsTagSet;
            }
            if (other.smsc_ != null)
            {
                if (smsc_ == null)
                {
                    Smsc = new global::BlockPlus.Telco.Types.SMSC();
                }
                Smsc.MergeFrom(other.Smsc);
            }
            if (other.smpp_ != null)
            {
                if (smpp_ == null)
                {
                    Smpp = new global::BlockPlus.Telco.Types.SMPP();
                }
                Smpp.MergeFrom(other.Smpp);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            PickupTime = input.ReadUInt64();
                            break;
                        }
                    case 16:
                        {
                            SubmitTime = input.ReadUInt64();
                            break;
                        }
                    case 24:
                        {
                            IsTagSet = input.ReadBool();
                            break;
                        }
                    case 34:
                        {
                            if (smsc_ == null)
                            {
                                Smsc = new global::BlockPlus.Telco.Types.SMSC();
                            }
                            input.ReadMessage(Smsc);
                            break;
                        }
                    case 42:
                        {
                            if (smpp_ == null)
                            {
                                Smpp = new global::BlockPlus.Telco.Types.SMPP();
                            }
                            input.ReadMessage(Smpp);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Telco message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            /// <summary>
            //// To store smsc level information.
            /// </summary>
            public sealed partial class SMSC : pb::IMessage<SMSC>
            {
                private static readonly pb::MessageParser<SMSC> _parser = new pb::MessageParser<SMSC>(() => new SMSC());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<SMSC> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::BlockPlus.Telco.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SMSC()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SMSC(SMSC other) : this()
                {
                    stpId_ = other.stpId_;
                    smscId_ = other.smscId_;
                    sriRetryCount_ = other.sriRetryCount_;
                    fsmRetryCount_ = other.fsmRetryCount_;
                    hubToSmscTime_ = other.hubToSmscTime_;
                    smscGt_ = other.smscGt_;
                    vlrAddress_ = other.vlrAddress_;
                    imsi_ = other.imsi_;
                    rdsStatus_ = other.rdsStatus_;
                    alertStatus_ = other.alertStatus_;
                    smscTt_ = other.smscTt_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SMSC Clone()
                {
                    return new SMSC(this);
                }

                /// <summary>Field number for the "stp_id" field.</summary>
                public const int StpIdFieldNumber = 1;
                private int stpId_;
                /// <summary>
                //// To which SMSC STP message should go.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int StpId
                {
                    get { return stpId_; }
                    set
                    {
                        stpId_ = value;
                    }
                }

                /// <summary>Field number for the "smsc_id" field.</summary>
                public const int SmscIdFieldNumber = 2;
                private int smscId_;
                /// <summary>
                //// To track from which SMSC the message was initiated. 
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int SmscId
                {
                    get { return smscId_; }
                    set
                    {
                        smscId_ = value;
                    }
                }

                /// <summary>Field number for the "sri_retry_count" field.</summary>
                public const int SriRetryCountFieldNumber = 3;
                private int sriRetryCount_;
                /// <summary>
                //// To track number of SRISM retry attempts at SMSC.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int SriRetryCount
                {
                    get { return sriRetryCount_; }
                    set
                    {
                        sriRetryCount_ = value;
                    }
                }

                /// <summary>Field number for the "fsm_retry_count" field.</summary>
                public const int FsmRetryCountFieldNumber = 4;
                private int fsmRetryCount_;
                /// <summary>
                //// To track number of FSM retry attempts at SMSC.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int FsmRetryCount
                {
                    get { return fsmRetryCount_; }
                    set
                    {
                        fsmRetryCount_ = value;
                    }
                }

                /// <summary>Field number for the "hub_to_smsc_time" field.</summary>
                public const int HubToSmscTimeFieldNumber = 5;
                private ulong hubToSmscTime_;
                /// <summary>
                //// Time at which message was received on SMSC from Hub.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong HubToSmscTime
                {
                    get { return hubToSmscTime_; }
                    set
                    {
                        hubToSmscTime_ = value;
                    }
                }

                /// <summary>Field number for the "smsc_gt" field.</summary>
                public const int SmscGtFieldNumber = 6;
                private ulong smscGt_;
                /// <summary>
                //// SMSC GT.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong SmscGt
                {
                    get { return smscGt_; }
                    set
                    {
                        smscGt_ = value;
                    }
                }

                /// <summary>Field number for the "vlr_address" field.</summary>
                public const int VlrAddressFieldNumber = 7;
                private ulong vlrAddress_;
                /// <summary>
                //// VLR Address in SRISM response.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong VlrAddress
                {
                    get { return vlrAddress_; }
                    set
                    {
                        vlrAddress_ = value;
                    }
                }

                /// <summary>Field number for the "imsi" field.</summary>
                public const int ImsiFieldNumber = 8;
                private ulong imsi_;
                /// <summary>
                //// IMSI in SRISM response.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ulong Imsi
                {
                    get { return imsi_; }
                    set
                    {
                        imsi_ = value;
                    }
                }

                /// <summary>Field number for the "rds_status" field.</summary>
                public const int RdsStatusFieldNumber = 9;
                private bool rdsStatus_;
                /// <summary>
                //// To pick retry messages based on RDS status
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool RdsStatus
                {
                    get { return rdsStatus_; }
                    set
                    {
                        rdsStatus_ = value;
                    }
                }

                /// <summary>Field number for the "alert_status" field.</summary>
                public const int AlertStatusFieldNumber = 10;
                private bool alertStatus_;
                /// <summary>
                //// To pick pending retry messages
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool AlertStatus
                {
                    get { return alertStatus_; }
                    set
                    {
                        alertStatus_ = value;
                    }
                }

                /// <summary>Field number for the "smsc_tt" field.</summary>
                public const int SmscTtFieldNumber = 11;
                private int smscTt_;
                /// <summary>
                //// To set smsc tt value.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int SmscTt
                {
                    get { return smscTt_; }
                    set
                    {
                        smscTt_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as SMSC);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(SMSC other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (StpId != other.StpId) return false;
                    if (SmscId != other.SmscId) return false;
                    if (SriRetryCount != other.SriRetryCount) return false;
                    if (FsmRetryCount != other.FsmRetryCount) return false;
                    if (HubToSmscTime != other.HubToSmscTime) return false;
                    if (SmscGt != other.SmscGt) return false;
                    if (VlrAddress != other.VlrAddress) return false;
                    if (Imsi != other.Imsi) return false;
                    if (RdsStatus != other.RdsStatus) return false;
                    if (AlertStatus != other.AlertStatus) return false;
                    if (SmscTt != other.SmscTt) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (StpId != 0) hash ^= StpId.GetHashCode();
                    if (SmscId != 0) hash ^= SmscId.GetHashCode();
                    if (SriRetryCount != 0) hash ^= SriRetryCount.GetHashCode();
                    if (FsmRetryCount != 0) hash ^= FsmRetryCount.GetHashCode();
                    if (HubToSmscTime != 0UL) hash ^= HubToSmscTime.GetHashCode();
                    if (SmscGt != 0UL) hash ^= SmscGt.GetHashCode();
                    if (VlrAddress != 0UL) hash ^= VlrAddress.GetHashCode();
                    if (Imsi != 0UL) hash ^= Imsi.GetHashCode();
                    if (RdsStatus != false) hash ^= RdsStatus.GetHashCode();
                    if (AlertStatus != false) hash ^= AlertStatus.GetHashCode();
                    if (SmscTt != 0) hash ^= SmscTt.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (StpId != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt32(StpId);
                    }
                    if (SmscId != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(SmscId);
                    }
                    if (SriRetryCount != 0)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt32(SriRetryCount);
                    }
                    if (FsmRetryCount != 0)
                    {
                        output.WriteRawTag(32);
                        output.WriteInt32(FsmRetryCount);
                    }
                    if (HubToSmscTime != 0UL)
                    {
                        output.WriteRawTag(40);
                        output.WriteUInt64(HubToSmscTime);
                    }
                    if (SmscGt != 0UL)
                    {
                        output.WriteRawTag(48);
                        output.WriteUInt64(SmscGt);
                    }
                    if (VlrAddress != 0UL)
                    {
                        output.WriteRawTag(56);
                        output.WriteUInt64(VlrAddress);
                    }
                    if (Imsi != 0UL)
                    {
                        output.WriteRawTag(64);
                        output.WriteUInt64(Imsi);
                    }
                    if (RdsStatus != false)
                    {
                        output.WriteRawTag(72);
                        output.WriteBool(RdsStatus);
                    }
                    if (AlertStatus != false)
                    {
                        output.WriteRawTag(80);
                        output.WriteBool(AlertStatus);
                    }
                    if (SmscTt != 0)
                    {
                        output.WriteRawTag(88);
                        output.WriteInt32(SmscTt);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (StpId != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StpId);
                    }
                    if (SmscId != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmscId);
                    }
                    if (SriRetryCount != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SriRetryCount);
                    }
                    if (FsmRetryCount != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FsmRetryCount);
                    }
                    if (HubToSmscTime != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HubToSmscTime);
                    }
                    if (SmscGt != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SmscGt);
                    }
                    if (VlrAddress != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VlrAddress);
                    }
                    if (Imsi != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Imsi);
                    }
                    if (RdsStatus != false)
                    {
                        size += 1 + 1;
                    }
                    if (AlertStatus != false)
                    {
                        size += 1 + 1;
                    }
                    if (SmscTt != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SmscTt);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(SMSC other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.StpId != 0)
                    {
                        StpId = other.StpId;
                    }
                    if (other.SmscId != 0)
                    {
                        SmscId = other.SmscId;
                    }
                    if (other.SriRetryCount != 0)
                    {
                        SriRetryCount = other.SriRetryCount;
                    }
                    if (other.FsmRetryCount != 0)
                    {
                        FsmRetryCount = other.FsmRetryCount;
                    }
                    if (other.HubToSmscTime != 0UL)
                    {
                        HubToSmscTime = other.HubToSmscTime;
                    }
                    if (other.SmscGt != 0UL)
                    {
                        SmscGt = other.SmscGt;
                    }
                    if (other.VlrAddress != 0UL)
                    {
                        VlrAddress = other.VlrAddress;
                    }
                    if (other.Imsi != 0UL)
                    {
                        Imsi = other.Imsi;
                    }
                    if (other.RdsStatus != false)
                    {
                        RdsStatus = other.RdsStatus;
                    }
                    if (other.AlertStatus != false)
                    {
                        AlertStatus = other.AlertStatus;
                    }
                    if (other.SmscTt != 0)
                    {
                        SmscTt = other.SmscTt;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                                {
                                    StpId = input.ReadInt32();
                                    break;
                                }
                            case 16:
                                {
                                    SmscId = input.ReadInt32();
                                    break;
                                }
                            case 24:
                                {
                                    SriRetryCount = input.ReadInt32();
                                    break;
                                }
                            case 32:
                                {
                                    FsmRetryCount = input.ReadInt32();
                                    break;
                                }
                            case 40:
                                {
                                    HubToSmscTime = input.ReadUInt64();
                                    break;
                                }
                            case 48:
                                {
                                    SmscGt = input.ReadUInt64();
                                    break;
                                }
                            case 56:
                                {
                                    VlrAddress = input.ReadUInt64();
                                    break;
                                }
                            case 64:
                                {
                                    Imsi = input.ReadUInt64();
                                    break;
                                }
                            case 72:
                                {
                                    RdsStatus = input.ReadBool();
                                    break;
                                }
                            case 80:
                                {
                                    AlertStatus = input.ReadBool();
                                    break;
                                }
                            case 88:
                                {
                                    SmscTt = input.ReadInt32();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            //// To store response data from SMPP Operator
            /// </summary>
            public sealed partial class SMPP : pb::IMessage<SMPP>
            {
                private static readonly pb::MessageParser<SMPP> _parser = new pb::MessageParser<SMPP>(() => new SMPP());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<SMPP> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::BlockPlus.Telco.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SMPP()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SMPP(SMPP other) : this()
                {
                    response_ = other.response_;
                    retryCount_ = other.retryCount_;
                    operatorMsgId_ = other.operatorMsgId_;
                    responseStatus_ = other.responseStatus_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SMPP Clone()
                {
                    return new SMPP(this);
                }

                /// <summary>Field number for the "response" field.</summary>
                public const int ResponseFieldNumber = 1;
                private global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE response_ = global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE.Unknown;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE Response
                {
                    get { return response_; }
                    set
                    {
                        response_ = value;
                    }
                }

                /// <summary>Field number for the "retry_count" field.</summary>
                public const int RetryCountFieldNumber = 2;
                private int retryCount_;
                /// <summary>
                /// iDRRetryCount
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int RetryCount
                {
                    get { return retryCount_; }
                    set
                    {
                        retryCount_ = value;
                    }
                }

                /// <summary>Field number for the "operator_msg_id" field.</summary>
                public const int OperatorMsgIdFieldNumber = 3;
                private string operatorMsgId_ = "";
                /// <summary>
                ///cOperatorMsgID[40]
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string OperatorMsgId
                {
                    get { return operatorMsgId_; }
                    set
                    {
                        operatorMsgId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "response_status" field.</summary>
                public const int ResponseStatusFieldNumber = 4;
                private global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE_STATUS responseStatus_ = global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE_STATUS.OrsUnknown;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE_STATUS ResponseStatus
                {
                    get { return responseStatus_; }
                    set
                    {
                        responseStatus_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as SMPP);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(SMPP other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Response != other.Response) return false;
                    if (RetryCount != other.RetryCount) return false;
                    if (OperatorMsgId != other.OperatorMsgId) return false;
                    if (ResponseStatus != other.ResponseStatus) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Response != global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE.Unknown) hash ^= Response.GetHashCode();
                    if (RetryCount != 0) hash ^= RetryCount.GetHashCode();
                    if (OperatorMsgId.Length != 0) hash ^= OperatorMsgId.GetHashCode();
                    if (ResponseStatus != global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE_STATUS.OrsUnknown) hash ^= ResponseStatus.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Response != global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE.Unknown)
                    {
                        output.WriteRawTag(8);
                        output.WriteEnum((int)Response);
                    }
                    if (RetryCount != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(RetryCount);
                    }
                    if (OperatorMsgId.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(OperatorMsgId);
                    }
                    if (ResponseStatus != global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE_STATUS.OrsUnknown)
                    {
                        output.WriteRawTag(32);
                        output.WriteEnum((int)ResponseStatus);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(output);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (Response != global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE.Unknown)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Response);
                    }
                    if (RetryCount != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetryCount);
                    }
                    if (OperatorMsgId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperatorMsgId);
                    }
                    if (ResponseStatus != global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE_STATUS.OrsUnknown)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ResponseStatus);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(SMPP other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Response != global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE.Unknown)
                    {
                        Response = other.Response;
                    }
                    if (other.RetryCount != 0)
                    {
                        RetryCount = other.RetryCount;
                    }
                    if (other.OperatorMsgId.Length != 0)
                    {
                        OperatorMsgId = other.OperatorMsgId;
                    }
                    if (other.ResponseStatus != global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE_STATUS.OrsUnknown)
                    {
                        ResponseStatus = other.ResponseStatus;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                                break;
                            case 8:
                                {
                                    Response = (global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE)input.ReadEnum();
                                    break;
                                }
                            case 16:
                                {
                                    RetryCount = input.ReadInt32();
                                    break;
                                }
                            case 26:
                                {
                                    OperatorMsgId = input.ReadString();
                                    break;
                                }
                            case 32:
                                {
                                    ResponseStatus = (global::BlockPlus.Telco.Types.SMPP.Types.RESPONSE_STATUS)input.ReadEnum();
                                    break;
                                }
                        }
                    }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the SMPP message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types
                {
                    public enum RESPONSE
                    {
                        /// <summary>
                        /// The first enum value must be zero in proto3
                        /// </summary>
                        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
                        /// <summary>
                        /// OMT_SUBMITSM_RESP = 300,
                        /// </summary>
                        [pbr::OriginalName("SUBMITSM")] Submitsm = 1,
                    }

                    public enum RESPONSE_STATUS
                    {
                        /// <summary>
                        /// The first enum value must be zero in proto3
                        /// </summary>
                        [pbr::OriginalName("ORS_UNKNOWN")] OrsUnknown = 0,
                        /// <summary>
                        /// ST_DELIVERYSM_MO = 104
                        /// </summary>
                        [pbr::OriginalName("DELIVERYSM_MO")] DeliverysmMo = 1,
                        /// <summary>
                        /// ST_DELIVERYSM_MT = 105
                        /// </summary>
                        [pbr::OriginalName("DELIVERYSM_MT")] DeliverysmMt = 2,
                    }

                }
                #endregion

            }

        }
        #endregion

    }

    /// <summary>
    //// To store db table information.
    /// </summary>
    public sealed partial class DBInfo : pb::IMessage<DBInfo>
    {
        private static readonly pb::MessageParser<DBInfo> _parser = new pb::MessageParser<DBInfo>(() => new DBInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DBInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DBInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DBInfo(DBInfo other) : this()
        {
            table_ = other.table_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DBInfo Clone()
        {
            return new DBInfo(this);
        }

        /// <summary>Field number for the "table" field.</summary>
        public const int TableFieldNumber = 1;
        private global::BlockPlus.DBInfo.Types.TABLE table_ = global::BlockPlus.DBInfo.Types.TABLE.Unknown;
        /// <summary>
        //// Identifies the type of table to update the data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.DBInfo.Types.TABLE Table
        {
            get { return table_; }
            set
            {
                table_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DBInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DBInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Table != other.Table) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Table != global::BlockPlus.DBInfo.Types.TABLE.Unknown) hash ^= Table.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Table != global::BlockPlus.DBInfo.Types.TABLE.Unknown)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Table);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Table != global::BlockPlus.DBInfo.Types.TABLE.Unknown)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Table);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DBInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Table != global::BlockPlus.DBInfo.Types.TABLE.Unknown)
            {
                Table = other.Table;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            Table = (global::BlockPlus.DBInfo.Types.TABLE)input.ReadEnum();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the DBInfo message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum TABLE
            {
                /// <summary>
                /// The first enum value must be zero in proto3
                /// </summary>
                [pbr::OriginalName("UNKNOWN")] Unknown = 0,
                /// <summary>
                /// 101 Initial Insert query FT_SUBMISSIONS
                /// </summary>
                [pbr::OriginalName("SUBMIT_SM")] SubmitSm = 1,
                /// <summary>
                /// 102  // Delivery report insert query FT_DELIVERY and FT_CDR
                /// </summary>
                [pbr::OriginalName("DELIVERY_REPORT")] DeliveryReport = 2,
                /// <summary>
                /// 103 // DR sent to client query FT_DR_TO_CLIENT
                /// </summary>
                [pbr::OriginalName("DR_TO_CLIENT")] DrToClient = 3,
                /// <summary>
                /// 107 FT_REJECTED
                /// </summary>
                [pbr::OriginalName("SUBMIT_SM_REJECT")] SubmitSmReject = 4,
                /// <summary>
                /// 105 // FT_FAIL_CDR
                /// </summary>
                [pbr::OriginalName("RETRY_INSERT")] RetryInsert = 5,
                /// <summary>
                /// 108  // Retry DB FT_RETRY_MESSAGES_ALERTS_*
                /// </summary>
                [pbr::OriginalName("RETRY_ALERT")] RetryAlert = 6,
                /// <summary>
                /// FT_SCHEDULED_MESSAGES
                /// </summary>
                [pbr::OriginalName("SCHEDULED_DELIVERY")] ScheduledDelivery = 7,
                /// <summary>
                /// FT_SMPP_SUBMITSM
                /// </summary>
                [pbr::OriginalName("SMPP_OPERATOR_SUBMIT_SM")] SmppOperatorSubmitSm = 8,
                /// <summary>
                /// FT_SMPP_SUBMITSM
                /// </summary>
                [pbr::OriginalName("SMPP_OPERATOR_DELIVER_SM")] SmppOperatorDeliverSm = 9,
                /// <summary>
                /// FT_SMPP_EXPIRED_DLRS
                /// </summary>
                [pbr::OriginalName("SMPP_OPERATOR_EXPIRED_DLR")] SmppOperatorExpiredDlr = 10,
                /// <summary>
                /// BroadCastUpdater
                /// </summary>
                [pbr::OriginalName("BROADCAST_MANAGER_DR")] BroadcastManagerDr = 11,
            }

        }
        #endregion

    }

    /// <summary>
    /// Contains data for error happended during the process of queues
    /// </summary>
    public sealed partial class PlatformErrorInfo : pb::IMessage<PlatformErrorInfo>
    {
        private static readonly pb::MessageParser<PlatformErrorInfo> _parser = new pb::MessageParser<PlatformErrorInfo>(() => new PlatformErrorInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlatformErrorInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlatformErrorInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlatformErrorInfo(PlatformErrorInfo other) : this()
        {
            errorSource_ = other.errorSource_;
            errorCode_ = other.errorCode_;
            errorMessage_ = other.errorMessage_;
            errorTime_ = other.errorTime_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlatformErrorInfo Clone()
        {
            return new PlatformErrorInfo(this);
        }

        /// <summary>Field number for the "error_source" field.</summary>
        public const int ErrorSourceFieldNumber = 1;
        private string errorSource_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorSource
        {
            get { return errorSource_; }
            set
            {
                errorSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "error_code" field.</summary>
        public const int ErrorCodeFieldNumber = 2;
        private int errorCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ErrorCode
        {
            get { return errorCode_; }
            set
            {
                errorCode_ = value;
            }
        }

        /// <summary>Field number for the "error_message" field.</summary>
        public const int ErrorMessageFieldNumber = 3;
        private string errorMessage_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ErrorMessage
        {
            get { return errorMessage_; }
            set
            {
                errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "error_time" field.</summary>
        public const int ErrorTimeFieldNumber = 4;
        private ulong errorTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong ErrorTime
        {
            get { return errorTime_; }
            set
            {
                errorTime_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PlatformErrorInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlatformErrorInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ErrorSource != other.ErrorSource) return false;
            if (ErrorCode != other.ErrorCode) return false;
            if (ErrorMessage != other.ErrorMessage) return false;
            if (ErrorTime != other.ErrorTime) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ErrorSource.Length != 0) hash ^= ErrorSource.GetHashCode();
            if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
            if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
            if (ErrorTime != 0UL) hash ^= ErrorTime.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ErrorSource.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ErrorSource);
            }
            if (ErrorCode != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(ErrorCode);
            }
            if (ErrorMessage.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(ErrorMessage);
            }
            if (ErrorTime != 0UL)
            {
                output.WriteRawTag(32);
                output.WriteUInt64(ErrorTime);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ErrorSource.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorSource);
            }
            if (ErrorCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
            }
            if (ErrorMessage.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
            }
            if (ErrorTime != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ErrorTime);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlatformErrorInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ErrorSource.Length != 0)
            {
                ErrorSource = other.ErrorSource;
            }
            if (other.ErrorCode != 0)
            {
                ErrorCode = other.ErrorCode;
            }
            if (other.ErrorMessage.Length != 0)
            {
                ErrorMessage = other.ErrorMessage;
            }
            if (other.ErrorTime != 0UL)
            {
                ErrorTime = other.ErrorTime;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ErrorSource = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            ErrorCode = input.ReadInt32();
                            break;
                        }
                    case 26:
                        {
                            ErrorMessage = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            ErrorTime = input.ReadUInt64();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    //// Main Buffer for a single message
    /// </summary>
    public sealed partial class SMSBuffer : pb::IMessage<SMSBuffer>
    {
        private static readonly pb::MessageParser<SMSBuffer> _parser = new pb::MessageParser<SMSBuffer>(() => new SMSBuffer());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SMSBuffer> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SMSBuffer()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SMSBuffer(SMSBuffer other) : this()
        {
            clientInterface_ = other.clientInterface_ != null ? other.clientInterface_.Clone() : null;
            serverInterface_ = other.serverInterface_ != null ? other.serverInterface_.Clone() : null;
            routeInfo_ = other.routeInfo_ != null ? other.routeInfo_.Clone() : null;
            telco_ = other.telco_ != null ? other.telco_.Clone() : null;
            drInfo_ = other.drInfo_ != null ? other.drInfo_.Clone() : null;
            retryInfo_ = other.retryInfo_ != null ? other.retryInfo_.Clone() : null;
            dbInfo_ = other.dbInfo_ != null ? other.dbInfo_.Clone() : null;
            platformErrorInfo_ = other.platformErrorInfo_ != null ? other.platformErrorInfo_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SMSBuffer Clone()
        {
            return new SMSBuffer(this);
        }

        /// <summary>Field number for the "client_interface" field.</summary>
        public const int ClientInterfaceFieldNumber = 1;
        private global::BlockPlus.ClientInterface clientInterface_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.ClientInterface ClientInterface
        {
            get { return clientInterface_; }
            set
            {
                clientInterface_ = value;
            }
        }

        /// <summary>Field number for the "server_interface" field.</summary>
        public const int ServerInterfaceFieldNumber = 2;
        private global::BlockPlus.ServerInterface serverInterface_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.ServerInterface ServerInterface
        {
            get { return serverInterface_; }
            set
            {
                serverInterface_ = value;
            }
        }

        /// <summary>Field number for the "route_info" field.</summary>
        public const int RouteInfoFieldNumber = 3;
        private global::BlockPlus.RouteInfo routeInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.RouteInfo RouteInfo
        {
            get { return routeInfo_; }
            set
            {
                routeInfo_ = value;
            }
        }

        /// <summary>Field number for the "telco" field.</summary>
        public const int TelcoFieldNumber = 4;
        private global::BlockPlus.Telco telco_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.Telco Telco
        {
            get { return telco_; }
            set
            {
                telco_ = value;
            }
        }

        /// <summary>Field number for the "dr_info" field.</summary>
        public const int DrInfoFieldNumber = 5;
        private global::BlockPlus.DRInfo drInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.DRInfo DrInfo
        {
            get { return drInfo_; }
            set
            {
                drInfo_ = value;
            }
        }

        /// <summary>Field number for the "retry_info" field.</summary>
        public const int RetryInfoFieldNumber = 6;
        private global::BlockPlus.RetryInfo retryInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.RetryInfo RetryInfo
        {
            get { return retryInfo_; }
            set
            {
                retryInfo_ = value;
            }
        }

        /// <summary>Field number for the "db_info" field.</summary>
        public const int DbInfoFieldNumber = 7;
        private global::BlockPlus.DBInfo dbInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.DBInfo DbInfo
        {
            get { return dbInfo_; }
            set
            {
                dbInfo_ = value;
            }
        }

        /// <summary>Field number for the "platform_error_info" field.</summary>
        public const int PlatformErrorInfoFieldNumber = 8;
        private global::BlockPlus.PlatformErrorInfo platformErrorInfo_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::BlockPlus.PlatformErrorInfo PlatformErrorInfo
        {
            get { return platformErrorInfo_; }
            set
            {
                platformErrorInfo_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SMSBuffer);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SMSBuffer other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(ClientInterface, other.ClientInterface)) return false;
            if (!object.Equals(ServerInterface, other.ServerInterface)) return false;
            if (!object.Equals(RouteInfo, other.RouteInfo)) return false;
            if (!object.Equals(Telco, other.Telco)) return false;
            if (!object.Equals(DrInfo, other.DrInfo)) return false;
            if (!object.Equals(RetryInfo, other.RetryInfo)) return false;
            if (!object.Equals(DbInfo, other.DbInfo)) return false;
            if (!object.Equals(PlatformErrorInfo, other.PlatformErrorInfo)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (clientInterface_ != null) hash ^= ClientInterface.GetHashCode();
            if (serverInterface_ != null) hash ^= ServerInterface.GetHashCode();
            if (routeInfo_ != null) hash ^= RouteInfo.GetHashCode();
            if (telco_ != null) hash ^= Telco.GetHashCode();
            if (drInfo_ != null) hash ^= DrInfo.GetHashCode();
            if (retryInfo_ != null) hash ^= RetryInfo.GetHashCode();
            if (dbInfo_ != null) hash ^= DbInfo.GetHashCode();
            if (platformErrorInfo_ != null) hash ^= PlatformErrorInfo.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (clientInterface_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(ClientInterface);
            }
            if (serverInterface_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(ServerInterface);
            }
            if (routeInfo_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(RouteInfo);
            }
            if (telco_ != null)
            {
                output.WriteRawTag(34);
                output.WriteMessage(Telco);
            }
            if (drInfo_ != null)
            {
                output.WriteRawTag(42);
                output.WriteMessage(DrInfo);
            }
            if (retryInfo_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(RetryInfo);
            }
            if (dbInfo_ != null)
            {
                output.WriteRawTag(58);
                output.WriteMessage(DbInfo);
            }
            if (platformErrorInfo_ != null)
            {
                output.WriteRawTag(66);
                output.WriteMessage(PlatformErrorInfo);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (clientInterface_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInterface);
            }
            if (serverInterface_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerInterface);
            }
            if (routeInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RouteInfo);
            }
            if (telco_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Telco);
            }
            if (drInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DrInfo);
            }
            if (retryInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetryInfo);
            }
            if (dbInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DbInfo);
            }
            if (platformErrorInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlatformErrorInfo);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SMSBuffer other)
        {
            if (other == null)
            {
                return;
            }
            if (other.clientInterface_ != null)
            {
                if (clientInterface_ == null)
                {
                    ClientInterface = new global::BlockPlus.ClientInterface();
                }
                ClientInterface.MergeFrom(other.ClientInterface);
            }
            if (other.serverInterface_ != null)
            {
                if (serverInterface_ == null)
                {
                    ServerInterface = new global::BlockPlus.ServerInterface();
                }
                ServerInterface.MergeFrom(other.ServerInterface);
            }
            if (other.routeInfo_ != null)
            {
                if (routeInfo_ == null)
                {
                    RouteInfo = new global::BlockPlus.RouteInfo();
                }
                RouteInfo.MergeFrom(other.RouteInfo);
            }
            if (other.telco_ != null)
            {
                if (telco_ == null)
                {
                    Telco = new global::BlockPlus.Telco();
                }
                Telco.MergeFrom(other.Telco);
            }
            if (other.drInfo_ != null)
            {
                if (drInfo_ == null)
                {
                    DrInfo = new global::BlockPlus.DRInfo();
                }
                DrInfo.MergeFrom(other.DrInfo);
            }
            if (other.retryInfo_ != null)
            {
                if (retryInfo_ == null)
                {
                    RetryInfo = new global::BlockPlus.RetryInfo();
                }
                RetryInfo.MergeFrom(other.RetryInfo);
            }
            if (other.dbInfo_ != null)
            {
                if (dbInfo_ == null)
                {
                    DbInfo = new global::BlockPlus.DBInfo();
                }
                DbInfo.MergeFrom(other.DbInfo);
            }
            if (other.platformErrorInfo_ != null)
            {
                if (platformErrorInfo_ == null)
                {
                    PlatformErrorInfo = new global::BlockPlus.PlatformErrorInfo();
                }
                PlatformErrorInfo.MergeFrom(other.PlatformErrorInfo);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (clientInterface_ == null)
                            {
                                ClientInterface = new global::BlockPlus.ClientInterface();
                            }
                            input.ReadMessage(ClientInterface);
                            break;
                        }
                    case 18:
                        {
                            if (serverInterface_ == null)
                            {
                                ServerInterface = new global::BlockPlus.ServerInterface();
                            }
                            input.ReadMessage(ServerInterface);
                            break;
                        }
                    case 26:
                        {
                            if (routeInfo_ == null)
                            {
                                RouteInfo = new global::BlockPlus.RouteInfo();
                            }
                            input.ReadMessage(RouteInfo);
                            break;
                        }
                    case 34:
                        {
                            if (telco_ == null)
                            {
                                Telco = new global::BlockPlus.Telco();
                            }
                            input.ReadMessage(Telco);
                            break;
                        }
                    case 42:
                        {
                            if (drInfo_ == null)
                            {
                                DrInfo = new global::BlockPlus.DRInfo();
                            }
                            input.ReadMessage(DrInfo);
                            break;
                        }
                    case 50:
                        {
                            if (retryInfo_ == null)
                            {
                                RetryInfo = new global::BlockPlus.RetryInfo();
                            }
                            input.ReadMessage(RetryInfo);
                            break;
                        }
                    case 58:
                        {
                            if (dbInfo_ == null)
                            {
                                DbInfo = new global::BlockPlus.DBInfo();
                            }
                            input.ReadMessage(DbInfo);
                            break;
                        }
                    case 66:
                        {
                            if (platformErrorInfo_ == null)
                            {
                                PlatformErrorInfo = new global::BlockPlus.PlatformErrorInfo();
                            }
                            input.ReadMessage(PlatformErrorInfo);
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    //// Main Buffer for list of messages 
    /// </summary>
    public sealed partial class SMS : pb::IMessage<SMS>
    {
        private static readonly pb::MessageParser<SMS> _parser = new pb::MessageParser<SMS>(() => new SMS());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SMS> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::BlockPlus.MessageBufferReflection.Descriptor.MessageTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SMS()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SMS(SMS other) : this()
        {
            smsBuffers_ = other.smsBuffers_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SMS Clone()
        {
            return new SMS(this);
        }

        /// <summary>Field number for the "sms_buffers" field.</summary>
        public const int SmsBuffersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::BlockPlus.SMSBuffer> _repeated_smsBuffers_codec
            = pb::FieldCodec.ForMessage(10, global::BlockPlus.SMSBuffer.Parser);
        private readonly pbc::RepeatedField<global::BlockPlus.SMSBuffer> smsBuffers_ = new pbc::RepeatedField<global::BlockPlus.SMSBuffer>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::BlockPlus.SMSBuffer> SmsBuffers
        {
            get { return smsBuffers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SMS);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SMS other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!smsBuffers_.Equals(other.smsBuffers_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= smsBuffers_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            smsBuffers_.WriteTo(output, _repeated_smsBuffers_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += smsBuffers_.CalculateSize(_repeated_smsBuffers_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SMS other)
        {
            if (other == null)
            {
                return;
            }
            smsBuffers_.Add(other.smsBuffers_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            smsBuffers_.AddEntriesFrom(input, _repeated_smsBuffers_codec);
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
